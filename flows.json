[
    {
        "id": "90a47a5490fd03e3",
        "type": "tab",
        "label": "SIMULADOR TEXTIL 2",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "4c0973556f015184",
        "type": "tab",
        "label": "Simulador Textil (6 Celdas)",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "9477a706cabb673d",
        "type": "ui-base",
        "name": "My Dashboard",
        "path": "/dashboard",
        "appIcon": "https://encrypted-tbn1.gstatic.com/images?q=tbn:ANd9GcRb2FTeF9vs0h5W5-8AaOT8GELe9oASI3BiNn9RB60NJcGLU17DYjxsT64hELKzs_e8uChKsnlnPd5kQZxtDHMDLOYZ7x7GPT5y3WCEfCe_",
        "includeClientData": true,
        "acceptsClientConfig": [
            "ui-notification",
            "ui-control"
        ],
        "showPathInSidebar": false,
        "headerContent": "page",
        "navigationStyle": "temporary",
        "titleBarStyle": "default",
        "showReconnectNotification": true,
        "notificationDisplayTime": 1,
        "showDisconnectNotification": true,
        "allowInstall": true
    },
    {
        "id": "7a4dd23066bfae3c",
        "type": "ui-theme",
        "name": "Default Theme",
        "colors": {
            "surface": "#054c51",
            "primary": "#8ecde6",
            "bgPage": "#b4c5c2",
            "groupBg": "#cde4f9",
            "groupOutline": "#000000"
        },
        "sizes": {
            "density": "default",
            "pagePadding": "12px",
            "groupGap": "12px",
            "groupBorderRadius": "4px",
            "widgetGap": "12px"
        }
    },
    {
        "id": "88c45a61e84912b1",
        "type": "ui-page",
        "name": "Celdas de trabajo",
        "ui": "9477a706cabb673d",
        "path": "/page2",
        "icon": "home",
        "layout": "grid",
        "theme": "7a4dd23066bfae3c",
        "breakpoints": [
            {
                "name": "Default",
                "px": "0",
                "cols": "3"
            },
            {
                "name": "Tablet",
                "px": "576",
                "cols": "6"
            },
            {
                "name": "Small Desktop",
                "px": "768",
                "cols": "9"
            },
            {
                "name": "Desktop",
                "px": "1024",
                "cols": "12"
            }
        ],
        "order": 1,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "6e18838a8ce84c0b",
        "type": "ui-group",
        "name": "Estado de celda",
        "page": "88c45a61e84912b1",
        "width": 6,
        "height": 1,
        "order": 3,
        "showTitle": true,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "14dca520c1815b77",
        "type": "ui-group",
        "name": "KPIs por turno",
        "page": "88c45a61e84912b1",
        "width": 6,
        "height": 1,
        "order": 2,
        "showTitle": true,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "b1e725e9fb17355d",
        "type": "ui-group",
        "name": "Productividad por turno",
        "page": "88c45a61e84912b1",
        "width": 6,
        "height": 1,
        "order": 4,
        "showTitle": true,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "082d639628900acd",
        "type": "ui-group",
        "name": "Controles de simulación",
        "page": "88c45a61e84912b1",
        "width": 6,
        "height": 1,
        "order": 1,
        "showTitle": true,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "0cbdf0984cc48a40",
        "type": "ui-page",
        "name": "Celdas de trabajo 2",
        "ui": "9477a706cabb673d",
        "path": "/page3",
        "icon": "factory",
        "layout": "tabs",
        "theme": "7a4dd23066bfae3c",
        "breakpoints": [
            {
                "name": "Default",
                "px": "0",
                "cols": "3"
            },
            {
                "name": "Tablet",
                "px": "576",
                "cols": "6"
            },
            {
                "name": "Small Desktop",
                "px": "768",
                "cols": "9"
            },
            {
                "name": "Desktop",
                "px": "1024",
                "cols": "12"
            }
        ],
        "order": 2,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "9ee96193c7db482b",
        "type": "ui-group",
        "name": "Estado de celda",
        "page": "0cbdf0984cc48a40",
        "width": 6,
        "height": 1,
        "order": 3,
        "showTitle": true,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "48e8f35e2b9e8df4",
        "type": "ui-group",
        "name": "KPIs por turno",
        "page": "0cbdf0984cc48a40",
        "width": 6,
        "height": 1,
        "order": 2,
        "showTitle": true,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "6948a1a24a42f69c",
        "type": "ui-group",
        "name": "Controles de simulación",
        "page": "0cbdf0984cc48a40",
        "width": 6,
        "height": 1,
        "order": 1,
        "showTitle": true,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "ab2ad95029b215cc",
        "type": "ui-group",
        "name": "Productividad por turno",
        "page": "0cbdf0984cc48a40",
        "width": "3",
        "height": 1,
        "order": 4,
        "showTitle": false,
        "className": "",
        "visible": true,
        "disabled": false,
        "groupType": "default"
    },
    {
        "id": "22a175978fff42d0",
        "type": "inject",
        "z": "90a47a5490fd03e3",
        "name": "Simular 1 Hora (cada 15 seg)",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "15",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "tick",
        "payloadType": "str",
        "x": 170,
        "y": 160,
        "wires": [
            [
                "42c3049216e52272"
            ]
        ]
    },
    {
        "id": "d4c0b080d9eacd1b",
        "type": "ui-template",
        "z": "90a47a5490fd03e3",
        "group": "48e8f35e2b9e8df4",
        "page": "",
        "ui": "",
        "name": "KPIs en Tiempo Real",
        "order": 1,
        "width": 0,
        "height": 0,
        "format": "<style>\n  @import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');\n\n  .kpis-dashboard {\n    background: rgba(255, 255, 255, 0.95);\n    backdrop-filter: blur(10px);\n    border-radius: 24px;\n    padding: 32px;\n    box-shadow:\n      0 8px 32px rgba(0, 0, 0, 0.1),\n      0 2px 8px rgba(0, 0, 0, 0.08);\n    border: 1px solid rgba(255, 255, 255, 0.2);\n    position: relative;\n    overflow: hidden;\n  }\n\n  .kpis-dashboard::before {\n    content: '';\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 0;\n    height: 4px;\n    background: linear-gradient(90deg, #3b82f6, #8b5cf6);\n    opacity: 0.8;\n  }\n\n  .kpis-header {\n    font-size: 1.5em;\n    font-weight: 700;\n    color: #1e293b;\n    margin-bottom: 28px;\n    text-align: center;\n    letter-spacing: -0.02em;\n  }\n\n  .turno-info {\n    background: rgba(255, 255, 255, 0.6);\n    padding: 16px 20px;\n    border-radius: 16px;\n    margin-bottom: 24px;\n    font-size: 0.95em;\n    color: #475569;\n    font-weight: 500;\n    border: 1px solid rgba(255, 255, 255, 0.3);\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    gap: 16px;\n    backdrop-filter: blur(5px);\n  }\n\n  .turno-info strong {\n    color: #1e293b;\n    font-weight: 700;\n  }\n\n  .kpis-grid {\n    display: grid;\n    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\n    gap: 20px;\n    margin-bottom: 28px;\n  }\n\n  .kpi-item {\n    background: rgba(255, 255, 255, 0.6);\n    border-radius: 16px;\n    padding: 24px 20px;\n    text-align: center;\n    transition: all 0.3s ease;\n    border: 1px solid rgba(255, 255, 255, 0.3);\n    backdrop-filter: blur(5px);\n    position: relative;\n    overflow: hidden;\n  }\n\n  .kpi-item::before {\n    content: '';\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 0;\n    height: 4px;\n    background: currentColor;\n    opacity: 0.8;\n  }\n\n  .kpi-item:hover {\n    transform: translateY(-4px);\n    box-shadow: 0 8px 25px rgba(0, 0, 0, 0.1);\n  }\n\n  .kpi-icon {\n    width: 50px;\n    height: 50px;\n    margin: 0 auto 12px;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    border-radius: 12px;\n    background: rgba(255, 255, 255, 0.8);\n  }\n\n  .tabler-icon {\n    width: 28px;\n    height: 28px;\n    stroke: currentColor;\n    stroke-width: 1.5;\n    fill: none;\n    stroke-linecap: round;\n    stroke-linejoin: round;\n  }\n\n  .kpi-value {\n    font-size: 1.8em;\n    font-weight: 700;\n    color: #1e293b;\n    margin: 8px 0;\n    letter-spacing: -0.01em;\n  }\n\n  .kpi-label {\n    font-size: 0.8em;\n    color: #64748b;\n    font-weight: 600;\n    text-transform: uppercase;\n    letter-spacing: 0.05em;\n  }\n\n  /* Colores específicos para cada KPI */\n  .kpi-meta {\n    color: #10b981;\n  }\n\n  .kpi-produccion {\n    color: #f59e0b;\n  }\n\n  .kpi-meta-acumulada {\n    color: #8b5cf6;\n  }\n\n  .kpi-real {\n    color: #3b82f6;\n  }\n\n  .progress-section {\n    background: rgba(255, 255, 255, 0.6);\n    padding: 20px;\n    border-radius: 16px;\n    border: 1px solid rgba(255, 255, 255, 0.3);\n    backdrop-filter: blur(5px);\n  }\n\n  .progress-label {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    margin-bottom: 12px;\n    font-size: 0.9em;\n    color: #374151;\n    font-weight: 600;\n  }\n\n  .progress-bar {\n    background: rgba(255, 255, 255, 0.8);\n    border-radius: 12px;\n    height: 12px;\n    overflow: hidden;\n    position: relative;\n  }\n\n  .progress-fill {\n    background: linear-gradient(90deg, #10b981 0%, #3b82f6 50%, #8b5cf6 100%);\n    height: 100%;\n    transition: width 0.8s cubic-bezier(0.25, 0.46, 0.45, 0.94);\n    border-radius: 10px;\n    position: relative;\n    overflow: hidden;\n  }\n\n  .progress-fill::after {\n    content: '';\n    position: absolute;\n    top: 0;\n    left: -100%;\n    width: 100%;\n    height: 100%;\n    background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.6), transparent);\n    animation: shimmer 1.5s infinite;\n  }\n\n  @keyframes shimmer {\n    0% {\n      transform: translateX(-100%);\n    }\n\n    100% {\n      transform: translateX(400%);\n    }\n  }\n\n  .no-data {\n    text-align: center;\n    color: #9ca3af;\n    padding: 48px 20px;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    gap: 16px;\n  }\n\n  .no-data-icon {\n    font-size: 3em;\n    opacity: 0.4;\n  }\n\n  .particles {\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    pointer-events: none;\n  }\n\n  .particle {\n    position: absolute;\n    background: rgba(59, 130, 246, 0.1);\n    border-radius: 50%;\n    animation: floatParticle 8s ease-in-out infinite;\n  }\n\n  @keyframes floatParticle {\n\n    0%,\n    100% {\n      transform: translate(0, 0) rotate(0deg) scale(1);\n      opacity: 0;\n    }\n\n    10% {\n      opacity: 0.3;\n    }\n\n    50% {\n      transform: translate(20px, -20px) rotate(180deg) scale(1.2);\n      opacity: 0.6;\n    }\n\n    90% {\n      opacity: 0.3;\n    }\n  }\n\n  @media (max-width: 768px) {\n    .kpis-dashboard {\n      padding: 24px 16px;\n    }\n\n    .kpis-grid {\n      grid-template-columns: 1fr;\n      gap: 16px;\n    }\n\n    .turno-info {\n      flex-direction: column;\n      text-align: center;\n      gap: 8px;\n    }\n\n    .kpi-value {\n      font-size: 1.6em;\n    }\n  }\n</style>\n\n<div class=\"kpis-dashboard\">\n  <div class=\"particles\">\n    <div v-for=\"i in 12\" :key=\"i\" class=\"particle\" :style=\"{\n      width: (Math.random() * 4 + 2) + 'px',\n      height: (Math.random() * 4 + 2) + 'px',\n      left: (Math.random() * 100) + '%',\n      top: (Math.random() * 100) + '%',\n      animationDelay: (Math.random() * 8) + 's',\n      animationDuration: (Math.random() * 4 + 6) + 's'\n    }\"></div>\n  </div>\n\n  <div class=\"kpis-header\">KPIs EN TIEMPO REAL</div>\n\n  <div v-if=\"msg && msg.payload\">\n    <div class=\"turno-info\">\n      <span><strong>Turno {{msg.payload.turno}}</strong> | Hora {{msg.payload.hora}}/8</span>\n      <span><b> Staffing: {{msg.payload.personal}}</b></span>\n    </div>\n\n    <div class=\"kpis-grid\">\n      <div class=\"kpi-item kpi-meta\">\n        <div class=\"kpi-icon\">\n          <svg class=\"tabler-icon\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\">\n            <path stroke=\"none\" d=\"M0 0h24v24H0z\" fill=\"none\" />\n            <path d=\"M12 12m-9 0a9 9 0 1 0 18 0a9 9 0 1 0 -18 0\" />\n            <path d=\"M12 7v5\" />\n            <path d=\"M12 12l2 -3\" />\n          </svg>\n        </div>\n        <div class=\"kpi-value\">{{formatNumber(msg.payload.meta_por_hora)}}</div>\n        <div class=\"kpi-label\">Meta por Hora</div>\n      </div>\n\n      <div class=\"kpi-item kpi-produccion\">\n        <div class=\"kpi-icon\">\n          <svg class=\"tabler-icon\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\">\n            <path stroke=\"none\" d=\"M0 0h24v24H0z\" fill=\"none\" />\n            <path d=\"M13 3l0 7l6 0l-8 11l0 -7l-6 0l8 -11\" />\n          </svg>\n        </div>\n        <div class=\"kpi-value\">{{formatNumber(msg.payload.produccion_actual)}}</div>\n        <div class=\"kpi-label\">Producción Hora</div>\n      </div>\n\n      <div class=\"kpi-item kpi-meta-acumulada\">\n        <div class=\"kpi-icon\">\n          <svg class=\"tabler-icon\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\">\n            <path stroke=\"none\" d=\"M0 0h24v24H0z\" fill=\"none\" />\n            <path d=\"M3 3v18h18\" />\n            <path d=\"M20 18v3\" />\n            <path d=\"M16 16v5\" />\n            <path d=\"M12 13v8\" />\n            <path d=\"M8 16v5\" />\n            <path d=\"M3 11c6 0 5 -5 9 -5s3 5 9 5\" />\n          </svg>\n        </div>\n        <div class=\"kpi-value\">{{formatNumber(msg.payload.meta_acumulada)}}</div>\n        <div class=\"kpi-label\">Meta Acumulada</div>\n      </div>\n\n      <div class=\"kpi-item kpi-real\">\n        <div class=\"kpi-icon\">\n          <svg class=\"tabler-icon\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\">\n            <path stroke=\"none\" d=\"M0 0h24v24H0z\" fill=\"none\" />\n            <path d=\"M5 12l5 5l10 -10\" />\n          </svg>\n        </div>\n        <div class=\"kpi-value\">{{formatNumber(msg.payload.real_acumulado)}}</div>\n        <div class=\"kpi-label\">Real Acumulado</div>\n      </div>\n    </div>\n\n    <div class=\"progress-section\">\n      <div class=\"progress-label\">\n        <span>Progreso del Turno</span>\n        <span>{{progressPercent}}%</span>\n      </div>\n      <div class=\"progress-bar\">\n        <div class=\"progress-fill\" :style=\"{ width: progressPercent + '%' }\"></div>\n      </div>\n    </div>\n  </div>\n\n  <div v-else class=\"no-data\">\n    <div class=\"no-data-icon\">⏳</div>\n    Esperando datos de simulación...\n  </div>\n</div>\n\n<script>\n  export default {\n    computed: {\n      progressPercent() {\n        if (!this.msg || !this.msg.payload) return 0;\n        const hora = Number(this.msg.payload.hora) || 0;\n        return Math.round((hora / 8) * 100);\n      }\n    },\n    methods: {\n      formatNumber(v) {\n        const n = Number(v) || 0;\n        return n.toLocaleString();\n      }\n    }\n  }\n</script>",
        "storeOutMessages": true,
        "passthru": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 500,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "afffb09e474bb6c8",
        "type": "switch",
        "z": "90a47a5490fd03e3",
        "name": "¿Hubo Desviación? (<90%)",
        "property": "payload.hubo_desviacion",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 520,
        "y": 100,
        "wires": [
            [
                "a7fdef685c35f93c"
            ]
        ]
    },
    {
        "id": "a7fdef685c35f93c",
        "type": "change",
        "z": "90a47a5490fd03e3",
        "name": "Preparar Msg de Alerta",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.alerta_msg",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "Alerta de Producción",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 770,
        "y": 100,
        "wires": [
            [
                "7608b2e92bb18f23"
            ]
        ]
    },
    {
        "id": "7608b2e92bb18f23",
        "type": "ui-notification",
        "z": "90a47a5490fd03e3",
        "ui": "9477a706cabb673d",
        "position": "top left",
        "colorDefault": false,
        "color": "#f44336",
        "displayTime": "5",
        "showCountdown": true,
        "outputs": 0,
        "allowDismiss": true,
        "dismissText": "Cerrar",
        "allowConfirm": false,
        "confirmText": "Confirm",
        "raw": false,
        "className": "",
        "name": "Alerta de Desviación",
        "x": 780,
        "y": 60,
        "wires": []
    },
    {
        "id": "f69128a8b01866a4",
        "type": "change",
        "z": "90a47a5490fd03e3",
        "name": "set flow.staffing",
        "rules": [
            {
                "t": "set",
                "p": "staffing",
                "pt": "flow",
                "to": "staffing",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "staffing",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 860,
        "y": 280,
        "wires": [
            []
        ]
    },
    {
        "id": "06f1093e12c66e24",
        "type": "change",
        "z": "90a47a5490fd03e3",
        "name": "set flow.meta_hora",
        "rules": [
            {
                "t": "set",
                "p": "meta_hora",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "meta_hora",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 750,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "ebe1446d44bc7d30",
        "type": "function",
        "z": "90a47a5490fd03e3",
        "name": "Formatear Gráfico (por Turno)",
        "func": "// msg.payload = { turno: 1, meta: X, real: Y, ... }\nlet p = msg.payload;\nlet category = `T${p.turno}`; // La etiqueta para el eje X, ej: \"T1\"\n\n// Mensaje para la barra \"Real\"\nlet msg_real = {\n    topic: \"Producción Real\",\n    payload: {\n        x: category,\n        y: p.real\n    }\n};\n\n// Mensaje para la barra \"Meta\"\nlet msg_meta = {\n    topic: \"Meta de Turno\",\n    payload: {\n        x: category,\n        y: p.meta\n    }\n};\n\n// Retorna un array de mensajes.\n// El ui-chart los recibirá y los ploteará como dos barras\n// en la misma categoría (ej. \"T1\")\nreturn [msg_real, msg_meta];",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 140,
        "wires": [
            [
                "633f7a3afd8c7e4c"
            ]
        ]
    },
    {
        "id": "bf14d4fac1d92276",
        "type": "inject",
        "z": "90a47a5490fd03e3",
        "name": "Establecer Defaults",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.5,
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 130,
        "y": 260,
        "wires": [
            [
                "4807a968780ab565",
                "8d9a6c3d7d0bde84"
            ]
        ]
    },
    {
        "id": "50ba71b55ba6e192",
        "type": "ui-template",
        "z": "90a47a5490fd03e3",
        "group": "6948a1a24a42f69c",
        "page": "",
        "ui": "",
        "name": "Selector de Personal (Staffing)",
        "order": 1,
        "width": "6",
        "height": "4",
        "format": "<style>\n  @import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');\n\n  .staffing-container {\n    background: rgba(255, 255, 255, 0.95);\n    backdrop-filter: blur(10px);\n    border-radius: 24px;\n    padding: 24px;\n    box-shadow:\n      0 8px 32px rgba(0, 0, 0, 0.1),\n      0 2px 8px rgba(0, 0, 0, 0.08);\n    border: 1px solid rgba(255, 255, 255, 0.2);\n    position: relative;\n    overflow: hidden;\n    height: fit-content;\n  }\n\n  .staffing-container::before {\n    content: '';\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 0;\n    height: 4px;\n    background: linear-gradient(90deg, #00bfa5, #009688);\n    opacity: 0.8;\n  }\n\n  .staffing-header {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    gap: 12px;\n    margin-bottom: 20px;\n    flex-wrap: wrap;\n  }\n\n  .staffing-label {\n    font-size: 1.1em;\n    font-weight: 600;\n    color: #1e293b;\n  }\n\n  .staffing-count {\n    background: linear-gradient(135deg, #00bfa5, #009688);\n    color: white;\n    padding: 6px 16px;\n    border-radius: 20px;\n    font-size: 1.1em;\n    font-weight: bold;\n    box-shadow: 0 3px 8px rgba(0, 150, 136, 0.4);\n  }\n\n  .staffing-grid {\n    display: flex;\n    justify-content: center;\n    gap: 12px;\n    flex-wrap: wrap;\n  }\n\n  .staffing-person {\n    width: 60px;\n    height: 60px;\n    background: rgba(255, 255, 255, 0.8);\n    border-radius: 50%;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    cursor: pointer;\n    transition: all 0.3s ease;\n    position: relative;\n    border: 2px solid transparent;\n    backdrop-filter: blur(5px);\n  }\n\n  .staffing-person.active {\n    background: linear-gradient(135deg, #00bfa5, #009688);\n    transform: scale(1.1);\n    animation: pulse 2s ease-in-out infinite;\n  }\n\n  .staffing-person:not(.active):hover {\n    transform: scale(1.05);\n    border-color: #009688;\n    background: rgba(0, 150, 136, 0.1);\n  }\n\n  .person-icon {\n    width: 28px;\n    height: 28px;\n    stroke: currentColor;\n    stroke-width: 1.5;\n    fill: none;\n    stroke-linecap: round;\n    stroke-linejoin: round;\n  }\n\n  .staffing-person.active .person-icon {\n    color: white;\n    animation: bounce 1s ease-in-out infinite;\n  }\n\n  .person-badge {\n    position: absolute;\n    bottom: -4px;\n    right: -4px;\n    background: #FF5722;\n    color: white;\n    font-size: 0.7em;\n    font-weight: bold;\n    border-radius: 50%;\n    width: 20px;\n    height: 20px;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    border: 2px solid white;\n    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.3);\n  }\n\n  .staffing-person.active .person-badge {\n    background: #4CAF50;\n  }\n\n  .particles {\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    pointer-events: none;\n  }\n\n  .particle {\n    position: absolute;\n    background: rgba(0, 191, 165, 0.1);\n    border-radius: 50%;\n    animation: floatParticle 8s ease-in-out infinite;\n  }\n\n  @keyframes floatParticle {\n\n    0%,\n    100% {\n      transform: translate(0, 0) rotate(0deg) scale(1);\n      opacity: 0;\n    }\n\n    10% {\n      opacity: 0.3;\n    }\n\n    50% {\n      transform: translate(15px, -15px) rotate(180deg) scale(1.2);\n      opacity: 0.6;\n    }\n\n    90% {\n      opacity: 0.3;\n    }\n  }\n\n  @keyframes pulse {\n\n    0%,\n    100% {\n      box-shadow: 0 0 0 0 rgba(0, 150, 136, 0.4);\n    }\n\n    50% {\n      box-shadow: 0 0 0 8px rgba(0, 150, 136, 0);\n    }\n  }\n\n  @keyframes bounce {\n\n    0%,\n    100% {\n      transform: translateY(0);\n    }\n\n    50% {\n      transform: translateY(-2px);\n    }\n  }\n\n  @media (max-width: 768px) {\n    .staffing-container {\n      padding: 20px 16px;\n    }\n\n    .staffing-person {\n      width: 50px;\n      height: 50px;\n    }\n\n    .person-icon {\n      width: 24px;\n      height: 24px;\n    }\n\n    .person-badge {\n      width: 18px;\n      height: 18px;\n      font-size: 0.6em;\n    }\n  }\n</style>\n\n<div class=\"staffing-container\">\n  <div class=\"particles\">\n    <div v-for=\"i in 8\" :key=\"i\" class=\"particle\" :style=\"{\n      width: (Math.random() * 3 + 1) + 'px',\n      height: (Math.random() * 3 + 1) + 'px',\n      left: (Math.random() * 100) + '%',\n      top: (Math.random() * 100) + '%',\n      animationDelay: (Math.random() * 6) + 's',\n      animationDuration: (Math.random() * 3 + 5) + 's'\n    }\"></div>\n  </div>\n\n  <div class=\"staffing-header\">\n    <span class=\"staffing-label\">Celdas Asignadas:</span>\n    <span class=\"staffing-count\">{{currentStaffing}}/{{maxStaffing}}</span>\n  </div>\n\n  <div class=\"staffing-grid\">\n    <div v-for=\"i in maxStaffing\" :key=\"i\" class=\"staffing-person\" :class=\"{ 'active': i <= currentStaffing }\"\n      @click=\"sendStaffing(i)\">\n      <svg class=\"person-icon\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\">\n        <path stroke=\"none\" d=\"M0 0h24v24H0z\" fill=\"none\" />\n        <circle cx=\"12\" cy=\"7\" r=\"4\" />\n        <path d=\"M6 21v-2a4 4 0 0 1 4 -4h4a4 4 0 0 1 4 4v2\" />\n      </svg>\n      <span class=\"person-badge\">{{i}}</span>\n    </div>\n  </div>\n</div>\n\n<script>\n  export default {\n    data() {\n      return {\n        currentStaffing: 3,\n        maxStaffing: 6,\n        isSynced: false\n      }\n    },\n    watch: {\n      msg: {\n        handler(newMsg) {\n          if (!newMsg) return;\n\n          if (newMsg.numCeldas !== undefined) {\n            const n = parseInt(newMsg.numCeldas, 10);\n            if (!isNaN(n) && n > 0) {\n              this.maxStaffing = n;\n              if (this.currentStaffing > n) {\n                this.currentStaffing = n;\n                this.sendStaffing(n);\n              }\n            }\n          }\n\n          if (newMsg.staffing !== undefined) {\n            const s = parseInt(newMsg.staffing, 10);\n            if (!isNaN(s)) {\n              this.currentStaffing = Math.max(0, Math.min(s, this.maxStaffing));\n              this.isSynced = true;\n              window.localStorage.setItem('sim_staffing', String(this.currentStaffing));\n            }\n          }\n        },\n        deep: true,\n        immediate: true\n      }\n    },\n    mounted() {\n      const saved = window.localStorage.getItem('sim_staffing');\n      if (saved !== null) {\n        const s = parseInt(saved, 10);\n        if (!isNaN(s)) {\n          this.currentStaffing = Math.max(0, Math.min(s, this.maxStaffing));\n        }\n      }\n    },\n    methods: {\n      sendStaffing(count) {\n        this.currentStaffing = count;\n        this.isSynced = true;\n        window.localStorage.setItem('sim_staffing', String(count));\n        this.send({\n          payload: count,\n          topic: 'staffing',\n          staffing: count\n        });\n      }\n    }\n  }\n</script>",
        "storeOutMessages": true,
        "passthru": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 610,
        "y": 280,
        "wires": [
            [
                "f69128a8b01866a4"
            ]
        ]
    },
    {
        "id": "54c0090dd396a7e0",
        "type": "ui-template",
        "z": "90a47a5490fd03e3",
        "group": "6948a1a24a42f69c",
        "page": "",
        "ui": "",
        "name": "Meta por hora",
        "order": 2,
        "width": "0",
        "height": "0",
        "format": "<style>\n  @import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');\n\n  .meta-container {\n    background: rgba(255, 255, 255, 0.95);\n    backdrop-filter: blur(10px);\n    border-radius: 24px;\n    padding: 24px;\n    box-shadow:\n      0 8px 32px rgba(0, 0, 0, 0.1),\n      0 2px 8px rgba(0, 0, 0, 0.08);\n    border: 1px solid rgba(255, 255, 255, 0.2);\n    position: relative;\n    overflow: hidden;\n    height: fit-content;\n  }\n\n  .meta-container::before {\n    content: '';\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 0;\n    height: 4px;\n    background: linear-gradient(90deg, #FF6B6B, #EE5A6F);\n    opacity: 0.8;\n  }\n\n  .meta-header {\n    text-align: center;\n    margin-bottom: 20px;\n  }\n\n  .meta-label {\n    font-size: 1.1em;\n    font-weight: 600;\n    color: #1e293b;\n    margin-bottom: 12px;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    gap: 8px;\n  }\n\n  .meta-value {\n    background: linear-gradient(135deg, #FF6B6B, #EE5A6F);\n    color: white;\n    padding: 10px 24px;\n    border-radius: 20px;\n    font-size: 1.8em;\n    font-weight: bold;\n    display: inline-block;\n    margin-bottom: 8px;\n    box-shadow: 0 4px 12px rgba(255, 107, 107, 0.4);\n    animation: pulse-value 2s ease-in-out infinite;\n  }\n\n  .meta-subtitle {\n    font-size: 0.85em;\n    color: #64748b;\n    font-weight: 500;\n  }\n\n  .meta-grid {\n    display: grid;\n    grid-template-columns: repeat(5, 1fr);\n    gap: 8px;\n    margin-bottom: 20px;\n  }\n\n  .meta-button {\n    background: rgba(255, 255, 255, 0.8);\n    border: 2px solid transparent;\n    border-radius: 12px;\n    padding: 12px 8px;\n    font-size: 1.1em;\n    font-weight: bold;\n    color: #64748b;\n    cursor: pointer;\n    transition: all 0.3s ease;\n    backdrop-filter: blur(5px);\n  }\n\n  .meta-button.active {\n    background: linear-gradient(135deg, #FF6B6B, #EE5A6F);\n    color: white;\n    transform: scale(1.05);\n    box-shadow: 0 3px 8px rgba(255, 107, 107, 0.4);\n  }\n\n  .meta-button:not(.active):hover {\n    transform: scale(1.03);\n    border-color: #FF6B6B;\n    background: rgba(255, 107, 107, 0.1);\n  }\n\n  .meta-quick-select {\n    display: flex;\n    justify-content: center;\n    gap: 8px;\n    margin-top: 16px;\n    flex-wrap: wrap;\n  }\n\n  .quick-select-btn {\n    background: rgba(108, 117, 125, 0.8);\n    color: white;\n    border: none;\n    border-radius: 16px;\n    padding: 8px 14px;\n    font-size: 0.8em;\n    font-weight: 600;\n    cursor: pointer;\n    display: flex;\n    align-items: center;\n    gap: 6px;\n    transition: all 0.3s ease;\n    backdrop-filter: blur(5px);\n  }\n\n  .quick-select-btn:hover {\n    background: rgba(90, 98, 104, 0.9);\n    transform: scale(1.05);\n  }\n\n  .quick-select-icon {\n    width: 16px;\n    height: 16px;\n    stroke: currentColor;\n    stroke-width: 2;\n    fill: none;\n    stroke-linecap: round;\n    stroke-linejoin: round;\n  }\n\n  .particles {\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    pointer-events: none;\n  }\n\n  .particle {\n    position: absolute;\n    background: rgba(255, 107, 107, 0.1);\n    border-radius: 50%;\n    animation: floatParticle 8s ease-in-out infinite;\n  }\n\n  @keyframes floatParticle {\n\n    0%,\n    100% {\n      transform: translate(0, 0) rotate(0deg) scale(1);\n      opacity: 0;\n    }\n\n    10% {\n      opacity: 0.3;\n    }\n\n    50% {\n      transform: translate(15px, -15px) rotate(180deg) scale(1.2);\n      opacity: 0.6;\n    }\n\n    90% {\n      opacity: 0.3;\n    }\n  }\n\n  @keyframes pulse-value {\n\n    0%,\n    100% {\n      transform: scale(1);\n      box-shadow: 0 4px 12px rgba(255, 107, 107, 0.4);\n    }\n\n    50% {\n      transform: scale(1.02);\n      box-shadow: 0 5px 15px rgba(255, 107, 107, 0.6);\n    }\n  }\n\n  @media (max-width: 768px) {\n    .meta-container {\n      padding: 20px 16px;\n    }\n\n    .meta-grid {\n      grid-template-columns: repeat(3, 1fr);\n      gap: 6px;\n    }\n\n    .meta-button {\n      padding: 10px 6px;\n      font-size: 1em;\n    }\n\n    .meta-value {\n      font-size: 1.6em;\n      padding: 8px 20px;\n    }\n\n    .meta-quick-select {\n      flex-direction: column;\n      align-items: center;\n    }\n\n    .quick-select-btn {\n      width: 100%;\n      max-width: 180px;\n      justify-content: center;\n    }\n  }\n</style>\n\n<div class=\"meta-container\">\n  <div class=\"particles\">\n    <div v-for=\"i in 8\" :key=\"i\" class=\"particle\" :style=\"{\n      width: (Math.random() * 3 + 1) + 'px',\n      height: (Math.random() * 3 + 1) + 'px',\n      left: (Math.random() * 100) + '%',\n      top: (Math.random() * 100) + '%',\n      animationDelay: (Math.random() * 6) + 's',\n      animationDuration: (Math.random() * 3 + 5) + 's'\n    }\"></div>\n  </div>\n\n  <div class=\"meta-header\">\n    <div class=\"meta-label\">Meta por Hora (por celda)</div>\n    <div class=\"meta-value\">{{metaHora}}</div>\n    <div class=\"meta-subtitle\">unidades/hora</div>\n  </div>\n\n  <div class=\"meta-grid\">\n    <button v-for=\"n in 10\" :key=\"n\"\n            class=\"meta-button\"\n            :class=\"{ 'active': n === metaHora }\"\n            @click=\"setMeta(n)\">\n      {{n}}\n    </button>\n  </div>\n\n  <div class=\"meta-quick-select\">\n    <button class=\"quick-select-btn\" @click=\"setMeta(3)\">\n      <svg class=\"quick-select-icon\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\">\n        <path stroke=\"none\" d=\"M0 0h24v24H0z\" fill=\"none\"/>\n        <path d=\"M12 12m-9 0a9 9 0 1 0 18 0a9 9 0 1 0 -18 0\" />\n        <path d=\"M12 12h-3.5\" />\n        <path d=\"M12 7v5\" />\n      </svg>\n      Baja (3)\n    </button>\n    <button class=\"quick-select-btn\" @click=\"setMeta(5)\">\n      <svg class=\"quick-select-icon\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\">\n        <path stroke=\"none\" d=\"M0 0h24v24H0z\" fill=\"none\"/>\n        <path d=\"M12 12m-9 0a9 9 0 1 0 18 0a9 9 0 1 0 -18 0\" />\n        <path d=\"M13.5 7.5l-3 3\" />\n        <path d=\"M12 12h2.5\" />\n        <path d=\"M12 7v5\" />\n      </svg>\n      Media (5)\n    </button>\n    <button class=\"quick-select-btn\" @click=\"setMeta(10)\">\n      <svg class=\"quick-select-icon\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\">\n        <path stroke=\"none\" d=\"M0 0h24v24H0z\" fill=\"none\"/>\n        <path d=\"M12 12m-9 0a9 9 0 1 0 18 0a9 9 0 1 0 -18 0\" />\n        <path d=\"M12 7v5l3 3\" />\n      </svg>\n      Alta (10)\n    </button>\n  </div>\n</div>\n\n<script>\n  export default {\n    data() {\n      return {\n        metaHora: 5,\n        staffing: 3,\n        isSynced: false\n      }\n    },\n    watch: {\n      msg: {\n        handler(newMsg) {\n          if (!newMsg) return;\n\n          if (newMsg.staffing !== undefined) {\n            const s = parseInt(newMsg.staffing, 10);\n            if (!isNaN(s)) this.staffing = s;\n          }\n\n          if (newMsg.meta_hora !== undefined) {\n            const m = parseInt(newMsg.meta_hora, 10);\n            if (!isNaN(m)) {\n              this.metaHora = m;\n              this.isSynced = true;\n              window.localStorage.setItem('sim_metaHora', String(this.metaHora));\n            }\n          }\n\n          if (newMsg.topic === 'meta' && newMsg.payload !== undefined) {\n            const v = parseInt(newMsg.payload, 10);\n            if (!isNaN(v)) {\n              this.metaHora = v;\n              this.isSynced = true;\n              window.localStorage.setItem('sim_metaHora', String(this.metaHora));\n            }\n          }\n        },\n        immediate: true,\n        deep: true\n      }\n    },\n    mounted() {\n      const saved = window.localStorage.getItem('sim_metaHora');\n      if (saved !== null) {\n        const m = parseInt(saved, 10);\n        if (!isNaN(m)) {\n          this.metaHora = m;\n        }\n      }\n    },\n    methods: {\n      setMeta(value) {\n        if (value >= 0 && value <= 999) {\n          this.metaHora = value;\n          this.isSynced = true;\n          window.localStorage.setItem('sim_metaHora', String(value));\n          this.send({ payload: this.metaHora, topic: 'meta', meta_hora: this.metaHora });\n        }\n      }\n    }\n  }\n</script>",
        "storeOutMessages": true,
        "passthru": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 560,
        "y": 240,
        "wires": [
            [
                "06f1093e12c66e24"
            ]
        ]
    },
    {
        "id": "42c3049216e52272",
        "type": "function",
        "z": "90a47a5490fd03e3",
        "name": "Motor de Simulación (Gemelo Digital)",
        "func": "// Motor de Simulación (Gemelo Digital) - VERSIÓN CORREGIDA\nconst PROCESOS = ['corte', 'costura', 'inspeccion', 'empaque'];\n\nlet celdas = flow.get(\"celdas\");\nlet estado_sim = flow.get(\"estado_sim\");\n\n// Inicialización si no existe\nif (!celdas) {\n    celdas = [];\n    for (let i = 1; i <= 6; i++) {\n        celdas.push({\n            id: i,\n            estado: \"parada\",\n            unid_ok_hora: 0,\n            unid_ok_total_turno: 0,\n            tiempo_ciclo: 10 + (i % 4) * 2,\n            utilizacion: 0,\n            tiempo_espera: 0,\n            horas_trabajadas: 0,\n            proceso: PROCESOS[i % PROCESOS.length] // ← Asigna proceso diferente por celda\n        });\n    }\n}\nif (!estado_sim) {\n    estado_sim = {\n        hora_turno: 0,\n        num_turno: 1,\n        horas_totales: 0,\n        real_acumulado: 0\n    };\n}\n\n// --- Parámetros del dashboard (vienen por flow.*) ---\nlet staffing = flow.get(\"staffing\");\nif (typeof staffing !== \"number\" || staffing < 0) staffing = 3;\n\nlet meta_hora_por_celda = flow.get(\"meta_hora\");\nif (typeof meta_hora_por_celda !== \"number\" || meta_hora_por_celda <= 0) meta_hora_por_celda = 5;\n\n// Avanzar simulación 1 hora\nestado_sim.hora_turno++;\nestado_sim.horas_totales++;\n\n// cálculos por hora\nlet produccion_total_hora = 0;\nif (staffing > celdas.length) staffing = celdas.length;\n\nfor (let i = 0; i < celdas.length; i++) {\n    let celda = celdas[i];\n    celda.unid_ok_hora = 0;\n\n    if (i < staffing) {\n        let r = Math.random();\n        if (r < 0.08) {\n            celda.estado = 'parada';\n            celda.progreso = 0;\n        } else if (r < 0.18) {\n            celda.estado = 'esperando';\n            celda.tiempo_espera = (celda.tiempo_espera || 0) + 1;\n        } else {\n            celda.estado = 'trabajando';\n            celda.horas_trabajadas = (celda.horas_trabajadas || 0) + 1;\n\n            // ← ROTACIÓN DE PROCESOS: Cambia el proceso cada hora\n            if (celda.estado === 'trabajando') {\n                const currentIndex = PROCESOS.indexOf(celda.proceso);\n                const nextIndex = (currentIndex + 1) % PROCESOS.length;\n                celda.proceso = PROCESOS[nextIndex];\n            }\n\n            let variationFactor = 0.7 + Math.random() * 0.6;\n            let unidades = Math.round(meta_hora_por_celda * variationFactor);\n            if (unidades < 0) unidades = 0;\n            celda.unid_ok_hora = unidades;\n            celda.unid_ok_total_turno = (celda.unid_ok_total_turno || 0) + unidades;\n            celda.progreso = ((celda.progreso || 0) + Math.round((unidades / Math.max(1, meta_hora_por_celda)) * 100)) % 100;\n        }\n    } else {\n        celda.estado = 'sin_personal';\n        celda.progreso = 0;\n    }\n\n    if (estado_sim.hora_turno > 0) {\n        celda.utilizacion = Math.min(100, ((celda.horas_trabajadas || 0) / estado_sim.hora_turno) * 100);\n    } else {\n        celda.utilizacion = 0;\n    }\n\n    produccion_total_hora += (celda.unid_ok_hora || 0);\n}\n\nestado_sim.real_acumulado = (estado_sim.real_acumulado || 0) + produccion_total_hora;\n\n// Preparar salidas\nlet msg_grid = { payload: celdas };\n\nlet meta_hora_total_staffed = meta_hora_por_celda * staffing;\nlet msg_tabla = {\n    payload: {\n        turno: estado_sim.num_turno,\n        hora: estado_sim.hora_turno,\n        personal: staffing,\n        meta_por_hora: meta_hora_total_staffed,\n        produccion_actual: produccion_total_hora,\n        meta_acumulada: meta_hora_total_staffed * estado_sim.hora_turno,\n        real_acumulado: estado_sim.real_acumulado\n    }\n};\n\nlet msg_turno_fin = null;\nif (estado_sim.hora_turno >= 8) {\n    let meta_total_turno = meta_hora_total_staffed * 8;\n    let real_total_turno = estado_sim.real_acumulado;\n    let cumplimiento = (meta_total_turno > 0) ? (real_total_turno / meta_total_turno) * 100 : 0;\n\n    msg_turno_fin = {\n        payload: {\n            turno: estado_sim.num_turno,\n            meta: meta_total_turno,\n            real: real_total_turno,\n            cumplimiento: cumplimiento,\n            alerta_msg: cumplimiento < 90 ? `ALERTA: Desviación en Turno ${estado_sim.num_turno}. Cumplimiento: ${cumplimiento.toFixed(1)}%` : `Turno ${estado_sim.num_turno} OK. Cumplimiento: ${cumplimiento.toFixed(1)}%`,\n            hubo_desviacion: cumplimiento < 90\n        }\n    };\n\n    // Reset turno - MANTENER LOS PROCESOS ACTUALES, NO RESETEAR A 'corte'\n    estado_sim.hora_turno = 0;\n    estado_sim.num_turno++;\n    estado_sim.real_acumulado = 0;\n\n    for (let celda of celdas) {\n        celda.unid_ok_total_turno = 0;\n        celda.horas_trabajadas = 0;\n        celda.tiempo_espera = 0;\n        celda.utilizacion = 0;\n        celda.progreso = 0;\n        // ← QUITAR: celda.proceso = 'corte'; (NO resetear el proceso)\n        celda.estado = 'parada';\n    }\n}\n\n// Mensaje de configuración explícita (ahora con staffing y meta)\nlet msg_staffing_config = {\n    payload: celdas.length,\n    numCeldas: celdas.length,\n    topic: \"config\",\n    staffing: staffing,\n    meta_hora: meta_hora_por_celda\n};\n\nflow.set(\"celdas\", celdas);\nflow.set(\"estado_sim\", estado_sim);\n\n// Salidas: [grid, tabla, turno_fin, staffing_config]\nreturn [msg_grid, msg_tabla, msg_turno_fin, msg_staffing_config];",
        "outputs": 4,
        "timeout": 0,
        "noerr": 0,
        "initialize": "// Código de inicialización (opcional)\nflow.set(\"celdas\", undefined);\nflow.set(\"estado_sim\", undefined);",
        "finalize": "",
        "libs": [],
        "x": 210,
        "y": 80,
        "wires": [
            [
                "6b0908094d02aefb"
            ],
            [
                "d4c0b080d9eacd1b"
            ],
            [
                "afffb09e474bb6c8",
                "ebe1446d44bc7d30"
            ],
            []
        ]
    },
    {
        "id": "4807a968780ab565",
        "type": "function",
        "z": "90a47a5490fd03e3",
        "name": "Default Meta",
        "func": "// Function node -> Default Meta: 5 (sólo si no existe)\nlet currentMeta = flow.get('meta_hora');\nif (typeof currentMeta !== 'number' || isNaN(currentMeta)) {\n  flow.set('meta_hora', 5);\n  msg.payload = 5;\n  msg.topic = 'meta';\n  msg.meta_hora = 5;\n  return msg;\n}\nreturn null;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 240,
        "wires": [
            [
                "54c0090dd396a7e0"
            ]
        ]
    },
    {
        "id": "8d9a6c3d7d0bde84",
        "type": "function",
        "z": "90a47a5490fd03e3",
        "name": "Default Staffing",
        "func": "// Function node -> Default Staffing: 3 (sólo si no existe)\nlet current = flow.get('staffing');\nif (typeof current !== 'number' || isNaN(current)) {\n  flow.set('staffing', 3);\n  msg.payload = 3;\n  msg.topic = 'staffing';\n  msg.staffing = 3;\n  return msg;\n}\nreturn null;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 280,
        "wires": [
            [
                "50ba71b55ba6e192"
            ]
        ]
    },
    {
        "id": "633f7a3afd8c7e4c",
        "type": "ui-chart",
        "z": "90a47a5490fd03e3",
        "group": "ab2ad95029b215cc",
        "name": "Gráfico",
        "label": "Producción vs Meta por Turno",
        "order": 1,
        "chartType": "line",
        "category": "",
        "categoryType": "none",
        "xAxisLabel": "Turnos",
        "xAxisProperty": "payload.x",
        "xAxisPropertyType": "msg",
        "xAxisType": "category",
        "xAxisFormat": "",
        "xAxisFormatType": "auto",
        "xmin": "",
        "xmax": "",
        "yAxisLabel": "Unidades Producidas",
        "yAxisProperty": "payload.y",
        "yAxisPropertyType": "msg",
        "ymin": "",
        "ymax": "",
        "bins": "",
        "stackSeries": false,
        "pointRadius": 4,
        "showLegend": true,
        "removeOlder": "10",
        "removeOlderUnit": "points",
        "removeOlderPoints": "",
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "textColor": [
            "#666666"
        ],
        "textColorDefault": true,
        "gridColor": [
            "#e5e5e5"
        ],
        "gridColorDefault": true,
        "width": "6",
        "height": "4",
        "className": "grafic-modern",
        "interpolation": "linear",
        "x": 740,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "6b0908094d02aefb",
        "type": "ui-template",
        "z": "90a47a5490fd03e3",
        "group": "9ee96193c7db482b",
        "page": "",
        "ui": "",
        "name": "Grid de Celdas (Proceso Textil)",
        "order": 1,
        "width": "0",
        "height": "0",
        "format": "<style>\n  @import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');\n  \n  * {\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box;\n  }\n\n  body {\n    margin: 0;\n    padding: 0;\n    background: linear-gradient(-45deg, #ee7752, #e73c7e, #23a6d5, #23d5ab);\n    background-size: 400% 400%;\n    animation: gradient 15s ease infinite;\n    font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;\n    min-height: 100vh;\n  }\n\n  @keyframes gradient {\n    0% { background-position: 0% 50%; }\n    50% { background-position: 100% 50%; }\n    100% { background-position: 0% 50%; }\n  }\n\n  .grid-container {\n    display: flex;\n    flex-wrap: wrap;\n    gap: 24px;\n    padding: 32px;\n    justify-content: center;\n    align-items: center;\n    min-height: 100vh;\n  }\n\n  .celda {\n    flex: 0 1 300px;\n    min-width: 280px;\n    perspective: 1000px;\n  }\n\n  .celda-inner {\n    background: rgba(255, 255, 255, 0.95);\n    backdrop-filter: blur(10px);\n    border-radius: 24px;\n    padding: 32px;\n    text-align: center;\n    color: #334155;\n    transition: all 0.4s cubic-bezier(0.175, 0.885, 0.32, 1.275);\n    height: 380px;\n    display: flex;\n    flex-direction: column;\n    justify-content: space-between;\n    box-shadow: \n      0 8px 32px rgba(0, 0, 0, 0.1),\n      0 2px 8px rgba(0, 0, 0, 0.08),\n      inset 0 1px 0 rgba(255, 255, 255, 0.6);\n    position: relative;\n    overflow: hidden;\n    border: 1px solid rgba(255, 255, 255, 0.2);\n  }\n\n  .celda-inner::before {\n    content: '';\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 0;\n    height: 4px;\n    background: currentColor;\n    opacity: 0.8;\n    transform: scaleX(0);\n    transition: transform 0.6s ease;\n  }\n\n  .celda:hover .celda-inner {\n    transform: translateY(-12px) rotateX(5deg);\n    box-shadow: \n      0 20px 40px rgba(0, 0, 0, 0.15),\n      0 8px 24px rgba(0, 0, 0, 0.12),\n      inset 0 1px 0 rgba(255, 255, 255, 0.8);\n  }\n\n  .celda:hover .celda-inner::before {\n    transform: scaleX(1);\n  }\n\n  .celda-title {\n    font-weight: 700;\n    font-size: 1.3em;\n    color: #1e293b;\n    margin-bottom: 16px;\n    letter-spacing: -0.02em;\n    text-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);\n  }\n\n  .celda-kpis-bottom {\n    font-size: 0.92em;\n    text-align: left;\n    line-height: 1.7;\n    color: #475569;\n    background: rgba(255, 255, 255, 0.6);\n    padding: 16px;\n    border-radius: 12px;\n    backdrop-filter: blur(5px);\n  }\n\n  .celda-kpis-bottom b {\n    color: #1e293b;\n    font-weight: 600;\n  }\n\n  .proceso-content {\n    flex-grow: 1;\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    min-height: 160px;\n  }\n\n  /* Contenedor de iconos - MEJORADO PARA CENTRADO */\n  .icon-container {\n    width: 100px;\n    height: 100px;\n    position: relative;\n    margin-bottom: 20px;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n  }\n\n  /* Estilos base para iconos SVG - MEJORADO */\n  .tabler-icon {\n    width: 80px;\n    height: 80px;\n    stroke: currentColor;\n    stroke-width: 1.5;\n    fill: none;\n    stroke-linecap: round;\n    stroke-linejoin: round;\n    filter: drop-shadow(0 4px 8px rgba(0, 0, 0, 0.2));\n  }\n\n  /* Asegurar que todos los SVG se centren correctamente */\n  .icon-container svg {\n    display: block;\n    margin: 0 auto;\n  }\n\n  /* Animación de CORTE - Tijeras cortando */\n  .icon-corte .tabler-icon {\n    animation: corte 2s ease-in-out infinite;\n  }\n\n  @keyframes corte {\n    0%, 100% { \n      transform: rotate(0deg) scale(1);\n    }\n    25% { \n      transform: rotate(-10deg) scale(1.1);\n    }\n    50% { \n      transform: rotate(5deg) scale(1.05);\n    }\n    75% { \n      transform: rotate(-5deg) scale(1.08);\n    }\n  }\n\n  /* Animación de COSTURA - Aguja cosiendo */\n  .icon-costura .tabler-icon {\n    animation: costura 1.8s ease-in-out infinite;\n  }\n\n  @keyframes costura {\n    0%, 100% { \n      transform: translateY(0px) rotate(0deg);\n    }\n    33% { \n      transform: translateY(-6px) rotate(3deg);\n    }\n    66% { \n      transform: translateY(3px) rotate(-2deg);\n    }\n  }\n\n  /* Animación de INSPECCIÓN - Lupa escaneando */\n  .icon-inspeccion .tabler-icon {\n    animation: inspeccion 2.2s ease-in-out infinite;\n  }\n\n  @keyframes inspeccion {\n    0%, 100% { \n      transform: scale(1) rotate(0deg);\n    }\n    25% { \n      transform: scale(1.1) rotate(45deg);\n    }\n    50% { \n      transform: scale(1.05) rotate(90deg);\n    }\n    75% { \n      transform: scale(1.1) rotate(135deg);\n    }\n  }\n\n  /* Animación de EMPAQUE - Caja moviéndose */\n  .icon-empaque .tabler-icon {\n    animation: empaque 2.5s ease-in-out infinite;\n  }\n\n  @keyframes empaque {\n    0%, 100% { \n      transform: translateY(0px) scale(1);\n    }\n    20% { \n      transform: translateY(-8px) scale(1.05);\n    }\n    40% { \n      transform: translateY(4px) scale(0.98);\n    }\n    60% { \n      transform: translateY(-6px) scale(1.03);\n    }\n    80% { \n      transform: translateY(2px) scale(0.99);\n    }\n  }\n\n  /* Animación de PARADA - Señal de alerta pulsante */\n  .icon-parada .tabler-icon {\n    animation: parada 1.5s ease-in-out infinite;\n  }\n\n  @keyframes parada {\n    0%, 100% { \n      transform: scale(1);\n      opacity: 1;\n    }\n    50% { \n      transform: scale(1.15);\n      opacity: 0.8;\n    }\n  }\n\n  /* Animación de ESPERANDO - Reloj de arena */\n  .icon-esperando .tabler-icon {\n    animation: esperando 3s ease-in-out infinite;\n  }\n\n  @keyframes esperando {\n    0%, 100% { \n      transform: rotate(0deg);\n    }\n    25% { \n      transform: rotate(90deg);\n    }\n    50% { \n      transform: rotate(180deg);\n    }\n    75% { \n      transform: rotate(270deg);\n    }\n  }\n\n  /* Animación de SIN PERSONAL - Persona desvaneciéndose */\n  .icon-sin_personal .tabler-icon {\n    animation: sinPersonal 3s ease-in-out infinite;\n  }\n\n  @keyframes sinPersonal {\n    0%, 100% { \n      transform: scale(1);\n      opacity: 1;\n    }\n    50% { \n      transform: scale(0.85);\n      opacity: 0.6;\n    }\n  }\n\n  .proceso-progreso-container {\n    background-color: rgba(255, 255, 255, 0.4);\n    border-radius: 12px;\n    height: 16px;\n    width: 100%;\n    margin-top: 20px;\n    overflow: hidden;\n    position: relative;\n  }\n\n  .proceso-progreso-value {\n    height: 100%;\n    transition: width 0.8s cubic-bezier(0.34, 1.56, 0.64, 1);\n    border-radius: 12px;\n    position: relative;\n    overflow: hidden;\n  }\n\n  .proceso-progreso-value::after {\n    content: '';\n    position: absolute;\n    top: 0;\n    left: -100%;\n    width: 100%;\n    height: 100%;\n    background: linear-gradient(90deg, transparent, rgba(255,255,255,0.6), transparent);\n    animation: shimmer 1.5s infinite;\n  }\n\n  @keyframes shimmer {\n    0% { transform: translateX(-100%); }\n    100% { transform: translateX(400%); }\n  }\n\n  .progreso-text {\n    font-size: 1em;\n    font-weight: 600;\n    margin-top: 16px;\n    letter-spacing: 0.03em;\n    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n    -webkit-background-clip: text;\n    -webkit-text-fill-color: transparent;\n    background-clip: text;\n    animation: textGlow 2s ease-in-out infinite alternate;\n  }\n\n  @keyframes textGlow {\n    from { filter: brightness(1); }\n    to { filter: brightness(1.3); }\n  }\n\n  .estado-text {\n    font-weight: 700;\n    margin-top: 20px;\n    font-size: 1.2em;\n    text-transform: uppercase;\n    letter-spacing: 0.08em;\n    position: relative;\n    display: inline-block;\n  }\n\n  .estado-text::after {\n    content: '';\n    position: absolute;\n    bottom: -4px;\n    left: 0;\n    width: 100%;\n    height: 2px;\n    background: currentColor;\n    transform: scaleX(0);\n    transition: transform 0.3s ease;\n  }\n\n  .celda:hover .estado-text::after {\n    transform: scaleX(1);\n  }\n\n  /* Estados con gradientes animados */\n  .celda-estado-trabajando .celda-inner {\n    background: linear-gradient(135deg, rgba(16, 185, 129, 0.95) 0%, rgba(5, 150, 105, 0.95) 100%);\n    color: #ffffff;\n  }\n\n  .celda-estado-parada .celda-inner {\n    background: linear-gradient(135deg, rgba(239, 68, 68, 0.95) 0%, rgba(220, 38, 38, 0.95) 100%);\n    color: #ffffff;\n  }\n\n  .celda-estado-esperando .celda-inner {\n    background: linear-gradient(135deg, rgba(245, 158, 11, 0.95) 0%, rgba(217, 119, 6, 0.95) 100%);\n    color: #ffffff;\n  }\n\n  .celda-estado-sin_personal .celda-inner {\n    background: linear-gradient(135deg, rgba(107, 114, 128, 0.95) 0%, rgba(75, 85, 99, 0.95) 100%);\n    color: #ffffff;\n  }\n\n  .celda-estado-trabajando .celda-title,\n  .celda-estado-parada .celda-title,\n  .celda-estado-esperando .celda-title,\n  .celda-estado-sin_personal .celda-title {\n    color: #ffffff;\n    text-shadow: 0 2px 4px rgba(0, 0, 0, 0.3);\n  }\n\n  .celda-estado-trabajando .celda-kpis-bottom,\n  .celda-estado-parada .celda-kpis-bottom,\n  .celda-estado-esperando .celda-kpis-bottom,\n  .celda-estado-sin_personal .celda-kpis-bottom {\n    color: rgba(255, 255, 255, 0.95);\n    background: rgba(255, 255, 255, 0.15);\n  }\n\n  .celda-estado-trabajando .celda-kpis-bottom b,\n  .celda-estado-parada .celda-kpis-bottom b,\n  .celda-estado-esperando .celda-kpis-bottom b,\n  .celda-estado-sin_personal .celda-kpis-bottom b {\n    color: #ffffff;\n  }\n\n  /* Partículas flotantes mejoradas */\n  .particles {\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    pointer-events: none;\n  }\n\n  .particle {\n    position: absolute;\n    background: rgba(255, 255, 255, 0.6);\n    border-radius: 50%;\n    animation: floatParticle 8s ease-in-out infinite;\n  }\n\n  @keyframes floatParticle {\n    0%, 100% { \n      transform: translate(0, 0) rotate(0deg) scale(1);\n      opacity: 0; \n    }\n    10% { \n      opacity: 1; \n    }\n    50% { \n      transform: translate(30px, -30px) rotate(180deg) scale(1.2);\n      opacity: 0.8; \n    }\n    90% { \n      opacity: 1; \n    }\n  }\n\n  /* Efectos de brillo para estados trabajando */\n  .celda-estado-trabajando .icon-container::before {\n    content: '';\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    width: 120px;\n    height: 120px;\n    background: radial-gradient(circle, rgba(255,255,255,0.3) 0%, transparent 70%);\n    transform: translate(-50%, -50%);\n    animation: glow 3s ease-in-out infinite;\n    border-radius: 50%;\n  }\n\n  @keyframes glow {\n    0%, 100% { opacity: 0.3; transform: translate(-50%, -50%) scale(1); }\n    50% { opacity: 0.6; transform: translate(-50%, -50%) scale(1.1); }\n  }\n\n  @media (max-width: 768px) {\n    .grid-container {\n      gap: 16px;\n      padding: 16px;\n    }\n\n    .celda {\n      flex: 0 1 260px;\n      min-width: 240px;\n    }\n\n    .celda-inner {\n      padding: 24px;\n      height: 340px;\n    }\n\n    .icon-container {\n      width: 80px;\n      height: 80px;\n    }\n\n    .tabler-icon {\n      width: 64px;\n      height: 64px;\n    }\n  }\n</style>\n\n<div class=\"grid-container\">\n  <div v-for=\"celda in msg.payload\" :key=\"celda.id\" class=\"celda\" :class=\"'celda-estado-' + celda.estado\">\n    <div class=\"celda-inner\">\n      <div class=\"particles\">\n        <div v-for=\"i in 8\" :key=\"i\" class=\"particle\" :style=\"{\n          width: (Math.random() * 6 + 2) + 'px',\n          height: (Math.random() * 6 + 2) + 'px',\n          left: (Math.random() * 100) + '%',\n          top: (Math.random() * 100) + '%',\n          animationDelay: (Math.random() * 8) + 's',\n          animationDuration: (Math.random() * 4 + 6) + 's'\n        }\"></div>\n      </div>\n      \n      <div class=\"celda-title\">Celda {{celda.id}}</div>\n      \n      <div class=\"proceso-content\">\n        <div v-if=\"celda.estado === 'trabajando'\">\n          <div class=\"icon-container\" :class=\"'icon-' + celda.proceso\">\n            <!-- CORTE - Tijeras -->\n            <svg v-if=\"celda.proceso === 'corte'\" class=\"tabler-icon\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\">\n              <path d=\"M6 7m-3 0a3 3 0 1 0 6 0a3 3 0 1 0 -6 0\" fill=\"none\" stroke=\"currentColor\"/>\n              <path d=\"M6 17m-3 0a3 3 0 1 0 6 0a3 3 0 1 0 -6 0\" fill=\"none\" stroke=\"currentColor\"/>\n              <path d=\"M8.6 8.6l10.4 10.4\" fill=\"none\" stroke=\"currentColor\"/>\n              <path d=\"M8.6 15.4l10.4 -10.4\" fill=\"none\" stroke=\"currentColor\"/>\n            </svg>\n            \n            <!-- COSTURA - Aguja -->\n            <svg v-else-if=\"celda.proceso === 'costura'\" class=\"tabler-icon\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\">\n              <path d=\"M3 21c-.667 -.667 3.262 -6.236 11.785 -16.709a3.5 3.5 0 1 1 5.078 4.791c-10.575 8.612 -16.196 12.585 -16.863 11.918z\" fill=\"none\" stroke=\"currentColor\"/>\n              <path d=\"M17.5 6.5l-1 1\" fill=\"none\" stroke=\"currentColor\"/>\n            </svg>\n            \n            <!-- INSPECCIÓN - Lupa -->\n            <svg v-else-if=\"celda.proceso === 'inspeccion'\" class=\"tabler-icon\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\">\n              <circle cx=\"10\" cy=\"10\" r=\"7\" fill=\"none\" stroke=\"currentColor\"/>\n              <path d=\"M21 21l-6 -6\" fill=\"none\" stroke=\"currentColor\"/>\n            </svg>\n            \n            <!-- EMPAQUE - Caja -->\n            <svg v-else-if=\"celda.proceso === 'empaque'\" class=\"tabler-icon\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\">\n              <path d=\"M12 3l8 4.5l0 9l-8 4.5l-8 -4.5l0 -9l8 -4.5\" fill=\"none\" stroke=\"currentColor\"/>\n              <path d=\"M12 12l8 -4.5\" fill=\"none\" stroke=\"currentColor\"/>\n              <path d=\"M12 12l0 9\" fill=\"none\" stroke=\"currentColor\"/>\n              <path d=\"M12 12l-8 -4.5\" fill=\"none\" stroke=\"currentColor\"/>\n            </svg>\n          </div>\n          <div class=\"progreso-text\">{{celda.proceso.toUpperCase()}} - {{Math.round(celda.progreso || 0)}}%</div>\n          <div class=\"proceso-progreso-container\">\n            <div class=\"proceso-progreso-value\" :style=\"{\n              width: celda.progreso + '%',\n              background: 'linear-gradient(90deg, rgba(255,255,255,0.8) 0%, rgba(255,255,255,0.9) 100%)'\n            }\"></div>\n          </div>\n        </div>\n        <div v-else>\n          <div class=\"icon-container\" :class=\"'icon-' + celda.estado\">\n            <!-- PARADA - Alerta -->\n            <svg v-if=\"celda.estado === 'parada'\" class=\"tabler-icon\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\">\n              <circle cx=\"12\" cy=\"12\" r=\"9\" fill=\"none\" stroke=\"currentColor\"/>\n              <path d=\"M12 8v4\" fill=\"none\" stroke=\"currentColor\"/>\n              <path d=\"M12 16h.01\" fill=\"none\" stroke=\"currentColor\"/>\n            </svg>\n            \n            <!-- ESPERANDO - Pausa -->\n            <svg v-else-if=\"celda.estado === 'esperando'\" class=\"tabler-icon\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\">\n              <rect x=\"6\" y=\"4\" width=\"4\" height=\"16\" rx=\"1\" fill=\"none\" stroke=\"currentColor\"/>\n              <rect x=\"14\" y=\"4\" width=\"4\" height=\"16\" rx=\"1\" fill=\"none\" stroke=\"currentColor\"/>\n            </svg>\n            \n            <!-- SIN PERSONAL - Usuario tachado -->\n            <svg v-else-if=\"celda.estado === 'sin_personal'\" class=\"tabler-icon\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\">\n              <circle cx=\"12\" cy=\"7\" r=\"4\" fill=\"none\" stroke=\"currentColor\"/>\n              <path d=\"M6 21v-2a4 4 0 0 1 4 -4h4\" fill=\"none\" stroke=\"currentColor\"/>\n              <path d=\"M18 8l-12 12\" fill=\"none\" stroke=\"currentColor\"/>\n            </svg>\n          </div>\n          <div class=\"estado-text\">{{celda.estado.replace('_', ' ')}}</div>\n        </div>\n      </div>\n      \n      <div class=\"celda-kpis-bottom\">\n        <div><b>Prod. Turno:</b> {{celda.unid_ok_total_turno}}</div>\n        <div><b>Util (%):</b> {{celda.utilizacion.toFixed(1)}}%</div>\n        <div><b>Espera (h):</b> {{celda.tiempo_espera}}</div>\n      </div>\n    </div>\n  </div>\n</div>",
        "storeOutMessages": true,
        "passthru": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 530,
        "y": 20,
        "wires": [
            []
        ]
    },
    {
        "id": "5c5967b68965d682",
        "type": "inject",
        "z": "4c0973556f015184",
        "name": "Simular 1 Hora (cada 5 seg)",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "tick",
        "payloadType": "str",
        "x": 200,
        "y": 140,
        "wires": [
            [
                "94ee969be98e728e"
            ]
        ]
    },
    {
        "id": "94ee969be98e728e",
        "type": "function",
        "z": "4c0973556f015184",
        "name": "Motor de Simulación (Gemelo Digital)",
        "func": "// --- 1. OBTENER ESTADO ANTERIOR (O INICIALIZAR) ---\nconst PROCESOS = ['corte', 'costura', 'inspeccion', 'empaque'];\n\nlet celdas = flow.get(\"celdas\") || [\n    { id: 1, estado: \"parada\", unid_ok_hora: 0, unid_ok_total_turno: 0, tiempo_ciclo: 10, utilizacion: 0, tiempo_espera: 0, horas_trabajadas: 0, proceso: 'corte', progreso: 0 },\n    { id: 2, estado: \"parada\", unid_ok_hora: 0, unid_ok_total_turno: 0, tiempo_ciclo: 12, utilizacion: 0, tiempo_espera: 0, horas_trabajadas: 0, proceso: 'corte', progreso: 0 },\n    { id: 3, estado: \"parada\", unid_ok_hora: 0, unid_ok_total_turno: 0, tiempo_ciclo: 8, utilizacion: 0, tiempo_espera: 0, horas_trabajadas: 0, proceso: 'corte', progreso: 0 },\n    { id: 4, estado: \"parada\", unid_ok_hora: 0, unid_ok_total_turno: 0, tiempo_ciclo: 10, utilizacion: 0, tiempo_espera: 0, horas_trabajadas: 0, proceso: 'corte', progreso: 0 },\n    { id: 5, estado: \"parada\", unid_ok_hora: 0, unid_ok_total_turno: 0, tiempo_ciclo: 15, utilizacion: 0, tiempo_espera: 0, horas_trabajadas: 0, proceso: 'corte', progreso: 0 },\n    { id: 6, estado: \"parada\", unid_ok_hora: 0, unid_ok_total_turno: 0, tiempo_ciclo: 10, utilizacion: 0, tiempo_espera: 0, horas_trabajadas: 0, proceso: 'corte', progreso: 0 }\n];\nlet estado_sim = flow.get(\"estado_sim\") || { hora_turno: 0, num_turno: 1, horas_totales: 0 };\n\n// --- 2. OBTENER PARÁMETROS DEL DASHBOARD ---\nlet staffing = flow.get(\"staffing\") || 3;\nlet meta_hora_por_celda = flow.get(\"meta_hora\") || 5;\n\n// --- 3. AVANZAR SIMULACIÓN 1 HORA ---\nestado_sim.hora_turno++;\nestado_sim.horas_totales++;\n\nlet produccion_total_hora = 0;\nlet produccion_total_turno_acumulada = 0;\n\n// --- 4. SIMULACIÓN POR CELDA (Flujo, KPIs) ---\nfor (let i = 0; i < celdas.length; i++) {\n    let celda = celdas[i];\n    celda.unid_ok_hora = 0; // Reseteamos la producción de esta hora\n    \n    // 4.1. Reasignación de Personal\n    if (i < staffing) {\n        \n        // 4.2. Simulación Cuello de Botella\n        if (celda.id === 2 && celdas[0].estado !== 'trabajando') {\n            celda.estado = 'esperando';\n            celda.tiempo_espera += 1;\n            celda.progreso = 0; // Pausa y resetea progreso si espera\n        } \n        // 4.3. Simulación de Falla Aleatoria\n        else if (celda.estado !== 'esperando') {\n            let rand = Math.random();\n            if (celda.estado === 'parada' && rand < 0.2) {\n                celda.estado = 'trabajando'; // 20% chance de repararse\n            }\n\n            if (celda.estado === 'trabajando') {\n                if (rand < 0.15) { // 15% chance de falla\n                    celda.estado = 'parada';\n                    celda.progreso = 0; // Resetea progreso al fallar\n                } else {\n                    // --- LÓGICA DE PROCESO TEXTIL ---\n                    celda.progreso += 25; // Avanza 25% por \"hora\" (tick)\n                    celda.horas_trabajadas += 1;\n                    \n                    if (celda.progreso >= 100) {\n                        celda.progreso = 0;\n                        let idx_actual = PROCESOS.indexOf(celda.proceso);\n                        \n                        if (idx_actual >= PROCESOS.length - 1) { // Si estaba en 'empaque'\n                            // Proceso terminado, 1 unidad producida\n                            celda.proceso = PROCESOS[0]; // Vuelve a 'corte'\n                            celda.unid_ok_hora = 1; \n                            celda.unid_ok_total_turno += 1;\n                        } else {\n                            celda.proceso = PROCESOS[idx_actual + 1]; // Avanza al siguiente proceso\n                        }\n                    }\n                    // --- FIN LÓGICA TEXTIL ---\n                }\n            } else if (celda.estado === 'parada') {\n                // Sigue en parada, no hace nada\n            }\n        }\n    } else {\n        // Celda NO tiene personal\n        celda.estado = 'sin_personal';\n        celda.progreso = 0;\n    }\n    \n    // 4.4. Calcular KPIs de Celda\n    if (estado_sim.hora_turno > 0) {\n        celda.utilizacion = (celda.horas_trabajadas / estado_sim.hora_turno) * 100;\n    } else {\n        celda.utilizacion = 0;\n    }\n    produccion_total_turno_acumulada += celda.unid_ok_total_turno;\n    produccion_total_hora += celda.unid_ok_hora;\n}\n\n// --- 5. PREPARAR SALIDAS (Dashboard) ---\n\n// Salida 1: Datos para el Grid de Celdas (se envía siempre)\nlet msg_grid = { payload: celdas };\n\n// Salida 2: Datos para la Tabla Comparativa (se envía siempre)\nlet meta_hora_total_staffed = meta_hora_por_celda * staffing;\nlet msg_tabla = { \n    payload: {\n        hora: estado_sim.hora_turno,\n        turno: estado_sim.num_turno,\n        staffing: staffing,\n        meta_hora: meta_hora_total_staffed,\n        real_hora: produccion_total_hora,\n        meta_turno_acum: meta_hora_total_staffed * estado_sim.hora_turno,\n        real_turno_acum: produccion_total_turno_acumulada\n    }\n};\n\nlet msg_turno_fin = null;\n\n// --- 6. AGREGACIÓN POR TURNO (Flujo) ---\nif (estado_sim.hora_turno >= 8) { // Asumimos turno de 8 horas\n    let meta_total_turno = meta_hora_total_staffed * 8;\n    let real_total_turno = produccion_total_turno_acumulada;\n    let cumplimiento = 0;\n    if (meta_total_turno > 0) {\n        cumplimiento = (real_total_turno / meta_total_turno) * 100;\n    }\n    \n    // 6.1. Preparar Salida 3: Datos de fin de turno (Gráfico y Alerta)\n    msg_turno_fin = {\n        payload: {\n            turno: estado_sim.num_turno,\n            meta: meta_total_turno,\n            real: real_total_turno,\n            cumplimiento: cumplimiento,\n            alerta_msg: cumplimiento < 90 ? \n                `ALERTA: Desviación en Turno ${estado_sim.num_turno}. Cumplimiento: ${cumplimiento.toFixed(1)}%` : \n                `Turno ${estado_sim.num_turno} OK. Cumplimiento: ${cumplimiento.toFixed(1)}%`,\n            hubo_desviacion: cumplimiento < 90\n        }\n    };\n    \n    // 6.3. Resetear para el siguiente turno\n    estado_sim.hora_turno = 0;\n    estado_sim.num_turno++;\n    for (let celda of celdas) {\n        celda.unid_ok_total_turno = 0;\n        celda.horas_trabajadas = 0;\n        celda.tiempo_espera = 0;\n        celda.utilizacion = 0;\n        celda.progreso = 0;\n        celda.proceso = 'corte';\n    }\n}\n\n// --- 7. GUARDAR ESTADO PARA PRÓXIMO TICK ---\nflow.set(\"celdas\", celdas);\nflow.set(\"estado_sim\", estado_sim);\n// Al final del nodo \"Motor de Simulación\", antes del return\nlet msg_staffing_config = { numCeldas: celdas.length };\n\n// Cambiar el return para incluir una 4ta salida\nreturn [ msg_grid, msg_tabla, msg_turno_fin, msg_staffing_config ];\n// Retornar mensajes a las 3 salidas del nodo\nreturn [ msg_grid, msg_tabla, msg_turno_fin ];",
        "outputs": 3,
        "timeout": 0,
        "noerr": 0,
        "initialize": "// Código de inicialización (opcional)\nflow.set(\"celdas\", undefined);\nflow.set(\"estado_sim\", undefined);",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 140,
        "wires": [
            [
                "58f9ce1db074ea84"
            ],
            [
                "091252891773a22f"
            ],
            [
                "19b5db394a7e9860",
                "19d141e1644cd53d"
            ]
        ]
    },
    {
        "id": "58f9ce1db074ea84",
        "type": "ui-template",
        "z": "4c0973556f015184",
        "group": "6e18838a8ce84c0b",
        "page": "",
        "ui": "",
        "name": "Grid de Celdas (Proceso Textil)",
        "order": 1,
        "width": 0,
        "height": 0,
        "format": "<style>\n    .grid-container {\n        display: grid;\n        grid-template-columns: repeat(auto-fill, minmax(140px, 1fr)); /* Un poco más ancho */\n        gap: 10px;\n        padding: 10px;\n    }\n    .celda {\n        border: 1px solid #444;\n        border-radius: 5px;\n        padding: 10px;\n        text-align: center;\n        color: #333;\n        transition: background-color 0.3s ease;\n        height: 180px; /* Un poco más alto para los KPIs */\n        display: flex;\n        flex-direction: column;\n        justify-content: space-between;\n    }\n    .celda-title {\n        font-weight: bold;\n        font-size: 1.1em;\n        border-bottom: 1px solid rgba(0,0,0,0.2);\n        margin-bottom: 5px;\n        padding-bottom: 5px;\n    }\n    /* Contenedor KPIs inferiores */\n    .celda-kpis-bottom {\n        font-size: 0.8em; /* Más pequeño */\n        text-align: left;\n        margin-top: 8px;\n        line-height: 1.3;\n        color: rgba(0,0,0,0.7); /* Color texto KPIs */\n    }\n    .celda-kpis-bottom b {\n         color: rgba(0,0,0,0.9); /* Color etiquetas KPIs */\n    }\n\n    /* Icono grande para el proceso o estado */\n    .proceso-icon {\n        font-size: 2.5em; /* Icono grande */\n        line-height: 1.2;\n        flex-grow: 1; /* Ocupa espacio disponible */\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        min-height: 40px; /* Altura mínima para el icono */\n    }\n\n    /* Barra de progreso del PROCESO */\n    .proceso-progreso-container {\n        background-color: rgba(0,0,0,0.3);\n        border-radius: 4px;\n        height: 10px;\n        width: 100%;\n        margin-top: 5px;\n        border: 1px solid rgba(0,0,0,0.2);\n        overflow: hidden;\n    }\n    .proceso-progreso-value {\n        background-color: #FFF;\n        opacity: 0.8;\n        height: 100%;\n        transition: width 0.3s ease;\n    }\n    .progreso-text {\n        font-size: 0.8em;\n        font-weight: bold;\n        color: rgba(255,255,255,0.9);\n        margin-top: 2px;\n    }\n    .estado-text { /* Para mostrar texto de estado (PARADA, ESPERANDO...) */\n         font-weight: bold;\n         margin-top: 10px;\n         font-size: 0.9em;\n    }\n\n\n    /* Clases de estado (Fondo) */\n    .celda-estado-trabajando { background-color: #2a9d8f; color: white; }\n    .celda-estado-parada { background-color: #e76f51; color: white; }\n    .celda-estado-esperando { background-color: #e9c46a; color: black; }\n    .celda-estado-sin_personal { background-color: #607D8B; color: white; }\n\n    /* Ajuste color KPIs en fondos oscuros */\n    .celda-estado-trabajando .celda-kpis-bottom,\n    .celda-estado-parada .celda-kpis-bottom,\n    .celda-estado-sin_personal .celda-kpis-bottom {\n        color: rgba(255,255,255,0.7);\n    }\n     .celda-estado-trabajando .celda-kpis-bottom b,\n    .celda-estado-parada .celda-kpis-bottom b,\n    .celda-estado-sin_personal .celda-kpis-bottom b {\n        color: rgba(255,255,255,0.9);\n    }\n\n</style>\n\n<div class=\"grid-container\">\n\n    <div v-for=\"celda in msg.payload\" :key=\"celda.id\" class=\"celda\" :class=\"'celda-estado-' + celda.estado\">\n\n        <div class=\"celda-title\">Celda {{celda.id}}</div>\n\n        <div style=\"flex-grow: 1; display: flex; flex-direction: column; justify-content: center;\">\n            <div v-if=\"celda.estado === 'trabajando'\">\n                <div class=\"proceso-icon\">\n                    <span v-if=\"celda.proceso === 'corte'\">✂️</span>\n                    <span v-else-if=\"celda.proceso === 'costura'\">🧵</span>\n                    <span v-else-if=\"celda.proceso === 'inspeccion'\">🔍</span>\n                    <span v-else-if=\"celda.proceso === 'empaque'\">📦</span>\n                </div>\n                <div class=\"progreso-text\">{{celda.proceso.toUpperCase()}}</div>\n                <div class=\"proceso-progreso-container\">\n                    <div class=\"proceso-progreso-value\" :style=\"{ width: celda.progreso + '%' }\"></div>\n                </div>\n            </div>\n            <div v-else>\n                <div class=\"proceso-icon\">\n                    <span v-if=\"celda.estado === 'parada'\">⚠️</span>\n                    <span v-else-if=\"celda.estado === 'esperando'\">⏳</span>\n                    <span v-else-if=\"celda.estado === 'sin_personal'\">🚫</span>\n                </div>\n                 <div class=\"estado-text\">{{celda.estado.toUpperCase()}}</div>\n            </div>\n        </div>\n\n        <div class=\"celda-kpis-bottom\">\n            <div><b>Prod. Turno:</b> {{celda.unid_ok_total_turno}}</div>\n            <div><b>Util (%):</b> {{celda.utilizacion.toFixed(1)}}%</div>\n            <div><b>Espera (h):</b> {{celda.tiempo_espera}}</div>\n        </div>\n\n    </div>\n</div>",
        "storeOutMessages": true,
        "passthru": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 850,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "091252891773a22f",
        "type": "ui-template",
        "z": "4c0973556f015184",
        "group": "14dca520c1815b77",
        "page": "",
        "ui": "",
        "name": "KPIs en Tiempo Real (Nuevo Diseño)",
        "order": 1,
        "width": 0,
        "height": 0,
        "format": "<style>\n    .dashboard-container {\n        background: white;\n        border-radius: 16px;\n        padding: 24px;\n        box-shadow: 0 4px 6px -1px rgba(0,0,0,0.1), 0 2px 4px -1px rgba(0,0,0,0.06);\n        font-family: 'Segoe UI', system-ui, sans-serif;\n        border: 1px solid #e2e8f0;\n    }\n    \n    .kpi-header {\n        font-size: 1.3em;\n        font-weight: 800;\n        color: #1e293b;\n        margin-bottom: 24px;\n        padding-bottom: 16px;\n        border-bottom: 3px solid #f1f5f9;\n        display: flex;\n        align-items: center;\n        gap: 12px;\n        letter-spacing: -0.5px;\n    }\n    \n    .kpi-grid {\n        display: grid;\n        grid-template-columns: repeat(auto-fit, minmax(220px, 1fr));\n        gap: 20px;\n        margin-bottom: 24px;\n    }\n    \n    .kpi-card {\n        background: linear-gradient(135deg, #f8fafc 0%, #ffffff 100%);\n        padding: 20px;\n        border-radius: 12px;\n        border-left: 5px solid #3b82f6;\n        transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);\n        box-shadow: 0 2px 8px rgba(0,0,0,0.08);\n        border: 1px solid #f1f5f9;\n    }\n    \n    .kpi-card:hover {\n        transform: translateY(-4px);\n        box-shadow: 0 8px 16px rgba(0,0,0,0.12);\n    }\n    \n    .kpi-card.meta { border-left-color: #10b981; }\n    .kpi-card.real { border-left-color: #f59e0b; }\n    .kpi-card.acum { border-left-color: #8b5cf6; }\n    \n    .kpi-label {\n        font-size: 0.9em;\n        color: #64748b;\n        font-weight: 700;\n        text-transform: uppercase;\n        letter-spacing: 0.8px;\n        margin-bottom: 8px;\n    }\n    \n    .kpi-value {\n        font-size: 1.8em;\n        font-weight: 800;\n        color: #1e293b;\n        font-family: 'Courier New', monospace;\n        letter-spacing: -1px;\n    }\n    \n    .progress-section {\n        margin-top: 24px;\n        background: #f8fafc;\n        padding: 20px;\n        border-radius: 12px;\n        border: 1px solid #e2e8f0;\n    }\n    \n    .progress-label {\n        display: flex;\n        justify-content: space-between;\n        margin-bottom: 10px;\n        font-size: 0.95em;\n        color: #475569;\n        font-weight: 600;\n    }\n    \n    .progress-bar {\n        background: #e2e8f0;\n        border-radius: 12px;\n        height: 16px;\n        overflow: hidden;\n        box-shadow: inset 0 2px 4px rgba(0,0,0,0.1);\n    }\n    \n    .progress-fill {\n        background: linear-gradient(135deg, #3b82f6, #1d4ed8, #3b82f6);\n        background-size: 200% 200%;\n        height: 100%;\n        transition: width 0.8s cubic-bezier(0.4, 0, 0.2, 1);\n        border-radius: 10px;\n        animation: shimmer 3s infinite;\n    }\n    \n    .turno-info {\n        background: linear-gradient(135deg, #f1f5f9, #e2e8f0);\n        padding: 16px 20px;\n        border-radius: 12px;\n        margin-bottom: 20px;\n        font-size: 0.95em;\n        color: #475569;\n        font-weight: 600;\n        border: 1px solid #e2e8f0;\n    }\n    \n    @keyframes shimmer {\n        0% { background-position: -200% 0; }\n        100% { background-position: 200% 0; }\n    }\n</style>\n\n<div class=\"dashboard-container\">\n    <div class=\"kpi-header\">\n        📊 KPIs EN TIEMPO REAL\n    </div>\n    \n    <div v-if=\"msg.payload\">\n        <div class=\"turno-info\">\n            <strong>Turno {{msg.payload.turno}}</strong> | Hora {{msg.payload.hora}}/8 | <b>Staffing: {{msg.payload.staffing}}</b>\n        </div>\n        \n        <div class=\"kpi-grid\">\n            <div class=\"kpi-card meta\">\n                <div class=\"kpi-label\">Meta por Hora</div>\n                <div class=\"kpi-value\">{{msg.payload.meta_hora}}</div>\n            </div>\n            <div class=\"kpi-card real\">\n                <div class=\"kpi-label\">Producción Actual</div>\n                <div class=\"kpi-value\">{{msg.payload.real_hora}}</div>\n            </div>\n            <div class=\"kpi-card acum\">\n                <div class=\"kpi-label\">Meta Acumulada</div>\n                <div class=\"kpi-value\">{{msg.payload.meta_turno_acum}}</div>\n            </div>\n            <div class=\"kpi-card\">\n                <div class=\"kpi-label\">Real Acumulado</div>\n                <div class=\"kpi-value\">{{msg.payload.real_turno_acum}}</div>\n            </div>\n        </div>\n        \n        <div class=\"progress-section\">\n            <div class=\"progress-label\">\n                <span>Progreso del Turno</span>\n                <span>{{Math.round((msg.payload.hora/8)*100)}}%</span>\n            </div>\n            <div class=\"progress-bar\">\n                <div class=\"progress-fill\" :style=\"{ width: (msg.payload.hora/8)*100 + '%' }\"></div>\n            </div>\n        </div>\n    </div>\n    <div v-else>\n        <div style=\"text-align: center; color: #64748b; padding: 40px;\">\n            <div style=\"font-size: 3em; margin-bottom: 16px;\">⏳</div>\n            Esperando datos de simulación...\n        </div>\n    </div>\n</div>",
        "storeOutMessages": true,
        "passthru": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 830,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "90cf93502612e982",
        "type": "ui-chart",
        "z": "4c0973556f015184",
        "group": "b1e725e9fb17355d",
        "name": "Gráfico",
        "label": "Producción vs Meta por Turno",
        "order": 1,
        "chartType": "line",
        "category": "",
        "categoryType": "none",
        "xAxisLabel": "Turnos",
        "xAxisProperty": "payload.x",
        "xAxisPropertyType": "msg",
        "xAxisType": "category",
        "xAxisFormat": "",
        "xAxisFormatType": "auto",
        "xmin": "",
        "xmax": "",
        "yAxisLabel": "Unidades Producidas",
        "yAxisProperty": "payload.y",
        "yAxisPropertyType": "msg",
        "ymin": "",
        "ymax": "",
        "bins": "",
        "stackSeries": false,
        "pointRadius": 4,
        "showLegend": true,
        "removeOlder": "10",
        "removeOlderUnit": "points",
        "removeOlderPoints": "",
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "textColor": [
            "#666666"
        ],
        "textColorDefault": true,
        "gridColor": [
            "#e5e5e5"
        ],
        "gridColorDefault": true,
        "width": "6",
        "height": "4",
        "className": "",
        "interpolation": "linear",
        "x": 1050,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "19b5db394a7e9860",
        "type": "switch",
        "z": "4c0973556f015184",
        "name": "¿Hubo Desviación? (<90%)",
        "property": "payload.hubo_desviacion",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 780,
        "y": 240,
        "wires": [
            [
                "7a1741004ce6a4bb"
            ]
        ]
    },
    {
        "id": "7a1741004ce6a4bb",
        "type": "change",
        "z": "4c0973556f015184",
        "name": "Preparar Msg de Alerta",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.alerta_msg",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "Alerta de Producción",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1000,
        "y": 200,
        "wires": [
            [
                "d2cb91be66fa5de8"
            ]
        ]
    },
    {
        "id": "d2cb91be66fa5de8",
        "type": "ui-notification",
        "z": "4c0973556f015184",
        "ui": "9477a706cabb673d",
        "position": "top right",
        "colorDefault": false,
        "color": "#F44336",
        "displayTime": "5",
        "showCountdown": true,
        "outputs": 0,
        "allowDismiss": true,
        "dismissText": "Cerrar",
        "allowConfirm": false,
        "confirmText": "Confirm",
        "raw": false,
        "className": "",
        "name": "Alerta de Desviación",
        "x": 1240,
        "y": 200,
        "wires": []
    },
    {
        "id": "958c809fe5cc5216",
        "type": "change",
        "z": "4c0973556f015184",
        "name": "set flow.staffing",
        "rules": [
            {
                "t": "set",
                "p": "staffing",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1000,
        "y": 400,
        "wires": [
            []
        ]
    },
    {
        "id": "dc83e430062df731",
        "type": "change",
        "z": "4c0973556f015184",
        "name": "set flow.meta_hora",
        "rules": [
            {
                "t": "set",
                "p": "meta_hora",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 970,
        "y": 460,
        "wires": [
            []
        ]
    },
    {
        "id": "19d141e1644cd53d",
        "type": "function",
        "z": "4c0973556f015184",
        "name": "Formatear Gráfico (por Turno)",
        "func": "// msg.payload = { turno: 1, meta: X, real: Y, ... }\nlet p = msg.payload;\nlet category = `T${p.turno}`; // La etiqueta para el eje X, ej: \"T1\"\n\n// Mensaje para la barra \"Real\"\nlet msg_real = {\n    topic: \"Producción Real\",\n    payload: {\n        x: category,\n        y: p.real\n    }\n};\n\n// Mensaje para la barra \"Meta\"\nlet msg_meta = {\n    topic: \"Meta de Turno\",\n    payload: {\n        x: category,\n        y: p.meta\n    }\n};\n\n// Retorna un array de mensajes.\n// El ui-chart los recibirá y los ploteará como dos barras\n// en la misma categoría (ej. \"T1\")\nreturn [msg_real, msg_meta];",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 300,
        "wires": [
            [
                "90cf93502612e982"
            ]
        ]
    },
    {
        "id": "24d16209885cf00b",
        "type": "inject",
        "z": "4c0973556f015184",
        "name": "Establecer Defaults (Deploy)",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.5,
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 120,
        "y": 420,
        "wires": [
            [
                "acd7655b9f6b5d72",
                "58f6a4109aacd6f2"
            ]
        ]
    },
    {
        "id": "acd7655b9f6b5d72",
        "type": "change",
        "z": "4c0973556f015184",
        "name": "Default Staffing: 3",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "3",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 420,
        "y": 400,
        "wires": [
            [
                "02b387f7ba29be58"
            ]
        ]
    },
    {
        "id": "58f6a4109aacd6f2",
        "type": "change",
        "z": "4c0973556f015184",
        "name": "Default Meta: 5",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "5",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 410,
        "y": 460,
        "wires": [
            [
                "3fd6db8bfeee91da"
            ]
        ]
    },
    {
        "id": "02b387f7ba29be58",
        "type": "ui-template",
        "z": "4c0973556f015184",
        "group": "082d639628900acd",
        "page": "",
        "ui": "",
        "name": "Selector de Personal (Staffing)",
        "order": 1,
        "width": "6",
        "height": "4",
        "format": "<style>\n    .staffing-selector-container {\n        display: flex;\n        justify-content: center;\n        align-items: center;\n        padding: 20px 0;\n        width: 100%;\n        gap: 12px;\n        flex-wrap: wrap;\n    }\n\n    .staffing-person-icon {\n        font-size: 2.5em;\n        cursor: pointer;\n        transition: all 0.3s ease-in-out;\n        padding: 15px;\n        border-radius: 12px;\n        background: linear-gradient(145deg, #f0f0f0, #cacaca);\n        box-shadow: 3px 3px 6px #bebebe, -3px -3px 6px #ffffff;\n        position: relative;\n        user-select: none;\n    }\n\n    .staffing-person-icon:not(.active) {\n        filter: grayscale(100%);\n        opacity: 0.4;\n    }\n\n    .staffing-person-icon:not(.active):hover {\n        transform: scale(1.1);\n        opacity: 0.6;\n        box-shadow: 2px 2px 4px #bebebe, -2px -2px 4px #ffffff;\n    }\n\n    .staffing-person-icon.active {\n        background: linear-gradient(145deg, #00bfa5, #009688);\n        box-shadow:\n            0 4px 15px rgba(0, 150, 136, 0.4),\n            inset 0 1px 3px rgba(255, 255, 255, 0.3);\n        filter: grayscale(0%);\n        transform: scale(1.05);\n        animation: pulse 2s ease-in-out infinite;\n    }\n\n    .staffing-person-icon.active:hover {\n        transform: scale(1.15);\n        box-shadow:\n            0 6px 20px rgba(0, 150, 136, 0.6),\n            inset 0 1px 3px rgba(255, 255, 255, 0.3);\n    }\n\n    .person-badge {\n        position: absolute;\n        bottom: -5px;\n        right: -5px;\n        background: #FF5722;\n        color: white;\n        font-size: 0.4em;\n        font-weight: bold;\n        border-radius: 50%;\n        width: 1.4em;\n        height: 1.4em;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        border: 2px solid white;\n        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.3);\n    }\n\n    .staffing-person-icon.active .person-badge {\n        background: #4CAF50;\n    }\n\n    @keyframes pulse {\n\n        0%,\n        100% {\n            box-shadow:\n                0 4px 15px rgba(0, 150, 136, 0.4),\n                inset 0 1px 3px rgba(255, 255, 255, 0.3);\n        }\n\n        50% {\n            box-shadow:\n                0 4px 25px rgba(0, 150, 136, 0.7),\n                inset 0 1px 3px rgba(255, 255, 255, 0.3);\n        }\n    }\n\n    .staffing-label {\n        font-size: 1.1em;\n        font-weight: bold;\n        margin-bottom: 15px;\n        color: #333;\n        text-align: center;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        gap: 10px;\n    }\n\n    .staffing-count {\n        background: linear-gradient(145deg, #009688, #00bfa5);\n        color: white;\n        padding: 8px 20px;\n        border-radius: 20px;\n        font-size: 1.2em;\n        box-shadow: 0 3px 8px rgba(0, 150, 136, 0.4);\n        min-width: 60px;\n        text-align: center;\n    }\n</style>\n\n<div>\n    <div class=\"staffing-label\">\n        👥 Celdas Asignadas:\n        <span class=\"staffing-count\">{{currentStaffing}}/{{maxStaffing}}</span>\n    </div>\n\n    <div class=\"staffing-selector-container\">\n        <span v-for=\"i in maxStaffing\"\n              :key=\"i\"\n              class=\"staffing-person-icon\"\n              :class=\"{ 'active': i <= currentStaffing }\"\n              @click=\"sendStaffing(i)\">\n            👤\n            <span class=\"person-badge\">{{i}}</span>\n        </span>\n    </div>\n</div>\n\n<script>\n    export default {\n        data() {\n            return {\n                currentStaffing: 3,\n                maxStaffing: 6\n            }\n        },\n        \n        watch: {\n            msg: {\n                handler(newMsg) {\n                    if (newMsg && newMsg.payload !== undefined) {\n                        let val = parseInt(newMsg.payload, 10);\n                        if (!isNaN(val) && val >= 1 && val <= this.maxStaffing) {\n                            this.currentStaffing = val;\n                        }\n                    }\n                    \n                    if (newMsg && newMsg.numCeldas !== undefined) {\n                        let numCeldas = parseInt(newMsg.numCeldas, 10);\n                        if (!isNaN(numCeldas) && numCeldas > 0) {\n                            this.maxStaffing = numCeldas;\n                            if (this.currentStaffing > numCeldas) {\n                                this.currentStaffing = numCeldas;\n                                this.sendStaffing(numCeldas);\n                            }\n                        }\n                    }\n                },\n                deep: true\n            }\n        },\n        \n        mounted() {\n            this.sendStaffing(this.currentStaffing);\n        },\n        \n        methods: {\n            sendStaffing(count) {\n                this.currentStaffing = count;\n                // Enviar con topic para identificar el mensaje\n                this.send({ \n                    payload: count,\n                    topic: 'staffing',\n                    staffing: count\n                });\n            }\n        }\n    }\n</script>",
        "storeOutMessages": true,
        "passthru": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 710,
        "y": 400,
        "wires": [
            [
                "958c809fe5cc5216",
                "3fd6db8bfeee91da"
            ]
        ]
    },
    {
        "id": "3fd6db8bfeee91da",
        "type": "ui-template",
        "z": "4c0973556f015184",
        "group": "082d639628900acd",
        "page": "",
        "ui": "",
        "name": "Meta por hora",
        "order": 2,
        "width": "6",
        "height": "4",
        "format": "<style>\n  /* Tu CSS original (con la animación pulse-value) */\n  .meta-container {\n    padding: 20px;\n    background: white;\n    border-radius: 16px;\n    box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);\n    height: 450px;\n  }\n\n  .meta-header {\n    text-align: center;\n    margin-bottom: 20px;\n  }\n\n  .meta-label {\n    font-size: 1.1em;\n    font-weight: bold;\n    color: #333;\n    margin-bottom: 10px;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    gap: 10px;\n  }\n\n  .meta-value-display {\n    background: linear-gradient(145deg, #FF6B6B, #EE5A6F);\n    color: white;\n    padding: 12px 30px;\n    border-radius: 25px;\n    font-size: 2em;\n    font-weight: bold;\n    box-shadow: 0 4px 15px rgba(255, 107, 107, 0.4);\n    display: inline-block;\n    font-family: 'Courier New', monospace;\n    animation: pulse-value 2s ease-in-out infinite;\n  }\n  \n  @keyframes pulse-value {\n     0%, 100% {\n       box-shadow: 0 4px 15px rgba(255, 107, 107, 0.4);\n     }\n     50% {\n       box-shadow: 0 6px 25px rgba(255, 107, 107, 0.6);\n     }\n  }\n\n  .meta-subtitle {\n    font-size: 0.9em;\n    color: #666;\n    margin-top: 8px;\n    font-weight: 600;\n  }\n\n  .meta-buttons-grid {\n    display: grid;\n    grid-template-columns: repeat(5, 1fr);\n    gap: 10px;\n    margin-top: 20px;\n  }\n\n  .meta-button {\n    background: linear-gradient(145deg, #f0f0f0, #e0e0e0);\n    border: 2px solid transparent;\n    border-radius: 12px;\n    padding: 15px 10px;\n    font-size: 1.3em;\n    font-weight: bold;\n    color: #666;\n    cursor: pointer;\n    transition: all 0.3s ease;\n    box-shadow: 3px 3px 6px #bebebe, -3px -3px 6px #fff;\n    position: relative;\n    user-select: none;\n  }\n\n  .meta-button.active {\n    background: linear-gradient(145deg, #FF6B6B, #EE5A6F);\n    color: white;\n    border-color: #EE5A6F;\n    transform: scale(1.08);\n  }\n\n  .meta-quick-select {\n    display: flex;\n    justify-content: center;\n    gap: 10px;\n    margin-top: 20px;\n    padding-top: 20px;\n    border-top: 2px solid #e0e0e0;\n  }\n\n  .quick-select-btn {\n    background: linear-gradient(145deg, #6c757d, #5a6268);\n    color: white;\n    border: none;\n    border-radius: 20px;\n    padding: 10px 20px;\n    font-size: 0.9em;\n    font-weight: 600;\n    cursor: pointer;\n    box-shadow: 0 3px 8px rgba(108, 117, 125, 0.3);\n    display: flex;\n    align-items: center;\n    gap: 5px;\n  }\n\n  .meta-info {\n    margin-top: 15px;\n    padding: 12px 15px;\n    background: linear-gradient(135deg, #fff3e0, #ffe0b2);\n    border-radius: 10px;\n    font-size: 0.9em;\n    color: #e65100;\n    border-left: 4px solid #FF6B6B;\n    font-weight: 600;\n  }\n\n  .sync-badge {\n    background: #4CAF50;\n    color: white;\n    padding: 4px 8px;\n    border-radius: 12px;\n    font-size: 0.7em;\n    margin-left: 8px;\n  }\n\n  @media (max-width:768px) {\n    .meta-buttons-grid {\n      grid-template-columns: repeat(4, 1fr);\n    }\n  }\n</style>\n\n<div class=\"meta-container\">\n  <div class=\"meta-header\">\n    <div class=\"meta-label\">🎯 Meta por Hora (por celda)\n      <span class=\"sync-badge\" v-if=\"isSynced\">SINCRONIZADO</span>\n    </div>\n    <div class=\"meta-value-display\">{{metaHora}}</div>\n    <div class=\"meta-subtitle\">unidades/hora/celda</div>\n  </div>\n\n  <div class=\"meta-buttons-grid\">\n    <button v-for=\"n in 10\" :key=\"n\" class=\"meta-button\" :class=\"{ 'active': n === metaHora }\" @click=\"setMeta(n)\">{{n}}</button>\n  </div>\n\n  <div class=\"meta-quick-select\">\n    <button class=\"quick-select-btn\" @click=\"setMeta(3)\"><span>🐌</span> Baja (3)</button>\n    <button class=\"quick-select-btn\" @click=\"setMeta(5)\"><span>⚡</span> Media (5)</button>\n    <button class=\"quick-select-btn\" @click=\"setMeta(10)\"><span>⚙️</span> Alta (10)</button>\n  </div>\n\n  <div class=\"meta-info\">💡 <strong>Meta Total:</strong> {{metaHora}} × {{staffing}} celdas =\n    <strong>{{metaHora * staffing}} unidades/hora</strong></div>\n</div>\n\n<script>\n  export default {\n  data() {\n    return {\n      metaHora: 5,\n      // Valor inicial. Este valor NO cambiará \n      // hasta que reciba un msg.staffing\n      staffing: 5, \n      isSynced: false \n    }\n  },\n  watch: {\n    msg: {\n      handler(newMsg) {\n        if (!newMsg) return;\n\n        // --- ESTA ES LA LÓGICA QUE LEE EL STAFFING ---\n        // Si el mensaje que llega tiene la propiedad \"staffing\"\n        // (msg.staffing), actualiza el valor.\n        // Si no la tiene, no hace NADA y staffing se queda en 5.\n        if (newMsg.staffing !== undefined) {\n          const s = parseInt(newMsg.staffing, 10);\n          if (!isNaN(s)) {\n            this.staffing = s;\n          }\n        }\n        \n        // --- LÓGICA DE META (de tu 1er código) ---\n        if (newMsg.meta_hora !== undefined) {\n          const m = parseInt(newMsg.meta_hora, 10);\n          if (!isNaN(m)) {\n            this.metaHora = m;\n            this.isSynced = true;\n            window.localStorage.setItem('sim_metaHora', String(this.metaHora));\n          }\n        }\n\n        if (newMsg.topic === 'meta' && newMsg.payload !== undefined) {\n          const v = parseInt(newMsg.payload, 10);\n          if (!isNaN(v)) {\n            this.metaHora = v;\n            this.isSynced = true;\n            window.localStorage.setItem('sim_metaHora', String(this.metaHora));\n          }\n        }\n      },\n      immediate: true,\n      deep: true\n    }\n  },\n  mounted() {\n    const saved = window.localStorage.getItem('sim_metaHora');\n    if (saved !== null) {\n      const m = parseInt(saved, 10);\n      if (!isNaN(m)) {\n        this.metaHora = m;\n      }\n    }\n  },\n  methods: {\n    setMeta(value) {\n      if (value >= 0 && value <= 999) {\n        this.metaHora = value;\n        this.isSynced = true;\n        window.localStorage.setItem('sim_metaHora', String(value));\n        this.send({ payload: this.metaHora, topic: 'meta', meta_hora: this.metaHora });\n      }\n    }\n  }\n}\n</script>",
        "storeOutMessages": true,
        "passthru": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 740,
        "y": 460,
        "wires": [
            [
                "dc83e430062df731"
            ]
        ]
    }
]