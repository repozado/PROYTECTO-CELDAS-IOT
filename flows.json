[
    {
        "id": "9ecbb3f80f61fce6",
        "type": "tab",
        "label": "Flujo 1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "e6f073a2291049a5",
        "type": "tab",
        "label": "Simulador Celdas de Trabajo (Gráfico por Turno)",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "9477a706cabb673d",
        "type": "ui-base",
        "name": "My Dashboard",
        "path": "/dashboard",
        "appIcon": "https://encrypted-tbn1.gstatic.com/images?q=tbn:ANd9GcRb2FTeF9vs0h5W5-8AaOT8GELe9oASI3BiNn9RB60NJcGLU17DYjxsT64hELKzs_e8uChKsnlnPd5kQZxtDHMDLOYZ7x7GPT5y3WCEfCe_",
        "includeClientData": true,
        "acceptsClientConfig": [
            "ui-notification",
            "ui-control"
        ],
        "showPathInSidebar": false,
        "headerContent": "page",
        "navigationStyle": "default",
        "titleBarStyle": "default",
        "showReconnectNotification": true,
        "notificationDisplayTime": 1,
        "showDisconnectNotification": true,
        "allowInstall": true
    },
    {
        "id": "7a4dd23066bfae3c",
        "type": "ui-theme",
        "name": "Default Theme",
        "colors": {
            "surface": "#054c51",
            "primary": "#8ecde6",
            "bgPage": "#b4c5c2",
            "groupBg": "#cde4f9",
            "groupOutline": "#000000"
        },
        "sizes": {
            "density": "default",
            "pagePadding": "12px",
            "groupGap": "12px",
            "groupBorderRadius": "4px",
            "widgetGap": "12px"
        }
    },
    {
        "id": "88c45a61e84912b1",
        "type": "ui-page",
        "name": "Celdas de trabajo",
        "ui": "9477a706cabb673d",
        "path": "/page2",
        "icon": "home",
        "layout": "grid",
        "theme": "7a4dd23066bfae3c",
        "breakpoints": [
            {
                "name": "Default",
                "px": "0",
                "cols": "3"
            },
            {
                "name": "Tablet",
                "px": "576",
                "cols": "6"
            },
            {
                "name": "Small Desktop",
                "px": "768",
                "cols": "9"
            },
            {
                "name": "Desktop",
                "px": "1024",
                "cols": "12"
            }
        ],
        "order": 1,
        "className": "",
        "visible": true,
        "disabled": true
    },
    {
        "id": "6e18838a8ce84c0b",
        "type": "ui-group",
        "name": "Estado de celda",
        "page": "88c45a61e84912b1",
        "width": 6,
        "height": 1,
        "order": 1,
        "showTitle": true,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "14dca520c1815b77",
        "type": "ui-group",
        "name": "KPIs por turno",
        "page": "88c45a61e84912b1",
        "width": 6,
        "height": 1,
        "order": 3,
        "showTitle": true,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "b1e725e9fb17355d",
        "type": "ui-group",
        "name": "Productividad por turno",
        "page": "88c45a61e84912b1",
        "width": 6,
        "height": 1,
        "order": 4,
        "showTitle": true,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "082d639628900acd",
        "type": "ui-group",
        "name": "Controles de simulación",
        "page": "88c45a61e84912b1",
        "width": 6,
        "height": 1,
        "order": 2,
        "showTitle": true,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "f1e26e419f054855",
        "type": "inject",
        "z": "e6f073a2291049a5",
        "name": "Simular 1 Hora (cada 5 seg)",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "tick",
        "payloadType": "str",
        "x": 200,
        "y": 140,
        "wires": [
            [
                "48fb7bad59807892"
            ]
        ]
    },
    {
        "id": "48fb7bad59807892",
        "type": "function",
        "z": "e6f073a2291049a5",
        "name": "Motor de Simulación (Gemelo Digital)",
        "func": "// --- 1. OBTENER ESTADO ANTERIOR (O INICIALIZAR) ---\nlet celdas = flow.get(\"celdas\") || [\n    { id: 1, estado: \"parada\", unid_ok_hora: 0, unid_ok_total_turno: 0, tiempo_ciclo: 10, utilizacion: 0, tiempo_espera: 0, horas_trabajadas: 0 },\n    { id: 2, estado: \"parada\", unid_ok_hora: 0, unid_ok_total_turno: 0, tiempo_ciclo: 12, utilizacion: 0, tiempo_espera: 0, horas_trabajadas: 0 },\n    { id: 3, estado: \"parada\", unid_ok_hora: 0, unid_ok_total_turno: 0, tiempo_ciclo: 8, utilizacion: 0, tiempo_espera: 0, horas_trabajadas: 0 },\n    { id: 4, estado: \"parada\", unid_ok_hora: 0, unid_ok_total_turno: 0, tiempo_ciclo: 10, utilizacion: 0, tiempo_espera: 0, horas_trabajadas: 0 },\n    { id: 5, estado: \"parada\", unid_ok_hora: 0, unid_ok_total_turno: 0, tiempo_ciclo: 15, utilizacion: 0, tiempo_espera: 0, horas_trabajadas: 0 }\n];\nlet estado_sim = flow.get(\"estado_sim\") || { hora_turno: 0, num_turno: 1, horas_totales: 0 };\n\n// --- 2. OBTENER PARÁMETROS DEL DASHBOARD ---\nlet staffing = flow.get(\"staffing\") || 3;\nlet meta_hora_por_celda = flow.get(\"meta_hora\") || 5;\n\n// --- 3. AVANZAR SIMULACIÓN 1 HORA ---\nestado_sim.hora_turno++;\nestado_sim.horas_totales++;\n\nlet produccion_total_hora = 0;\nlet produccion_total_turno_acumulada = 0;\n\n// --- 4. SIMULACIÓN POR CELDA (Flujo, KPIs) ---\nfor (let i = 0; i < celdas.length; i++) {\n    let celda = celdas[i];\n    \n    // 4.1. Reasignación de Personal (Ampliación \"Qué-pasa-si\")\n    if (i < staffing) {\n        // Celda TIENE personal.\n        \n        // 4.2. Simulación Cuello de Botella (Objetivo)\n        // Celda 2 depende de Celda 1.\n        if (celda.id === 2 && celdas[0].estado !== 'trabajando') {\n            celda.estado = 'esperando';\n            celda.tiempo_espera += 1; // KPI: Tiempos de espera\n            celda.unid_ok_hora = 0;\n        } \n        // 4.3. Simulación de Falla Aleatoria (para celdas que no están esperando)\n        else if (celda.estado !== 'esperando') {\n            let rand = Math.random();\n            if (rand < 0.85) { // 85% chance de trabajar\n                celda.estado = 'trabajando';\n                // Calcular producción de la hora\n                celda.unid_ok_hora = Math.floor(60 / celda.tiempo_ciclo);\n                celda.unid_ok_total_turno += celda.unid_ok_hora;\n                celda.horas_trabajadas += 1;\n            } else { // 15% chance de falla\n                celda.estado = 'parada';\n                celda.unid_ok_hora = 0;\n            }\n        }\n    } else {\n        // Celda NO tiene personal\n        celda.estado = 'sin_personal';\n        celda.unid_ok_hora = 0;\n    }\n    \n    // 4.4. Calcular KPIs de Celda (Variables)\n    // Prevenir división por cero en el primer tick del reseteo\n    if (estado_sim.hora_turno > 0) {\n        celda.utilizacion = (celda.horas_trabajadas / estado_sim.hora_turno) * 100; // KPI: Utilización\n    } else {\n        celda.utilizacion = 0;\n    }\n    produccion_total_turno_acumulada += celda.unid_ok_total_turno;\n    produccion_total_hora += celda.unid_ok_hora;\n}\n\n// --- 5. PREPARAR SALIDAS (Dashboard) ---\n\n// Salida 1: Datos para el Grid de Celdas (se envía siempre)\nlet msg_grid = { payload: celdas };\n\n// Salida 2: Datos para la Tabla Comparativa (se envía siempre)\nlet meta_hora_total_staffed = meta_hora_por_celda * staffing;\nlet msg_tabla = { \n    payload: {\n        hora: estado_sim.hora_turno,\n        turno: estado_sim.num_turno,\n        staffing: staffing,\n        meta_hora: meta_hora_total_staffed,\n        real_hora: produccion_total_hora,\n        meta_turno_acum: meta_hora_total_staffed * estado_sim.hora_turno,\n        real_turno_acum: produccion_total_turno_acumulada\n    }\n};\n\nlet msg_turno_fin = null;\n\n// --- 6. AGREGACIÓN POR TURNO (Flujo) ---\nif (estado_sim.hora_turno >= 8) { // Asumimos turno de 8 horas\n    let meta_total_turno = meta_hora_total_staffed * 8;\n    let real_total_turno = produccion_total_turno_acumulada;\n    let cumplimiento = 0;\n    if (meta_total_turno > 0) {\n        cumplimiento = (real_total_turno / meta_total_turno) * 100;\n    }\n    \n    // 6.1. Preparar Salida 3: Datos de fin de turno (Gráfico y Alerta)\n    msg_turno_fin = {\n        payload: {\n            turno: estado_sim.num_turno,\n            meta: meta_total_turno,\n            real: real_total_turno,\n            cumplimiento: cumplimiento,\n            // Mensaje para la alerta\n            alerta_msg: cumplimiento < 90 ? \n                `ALERTA: Desviación en Turno ${estado_sim.num_turno}. Cumplimiento: ${cumplimiento.toFixed(1)}%` : \n                `Turno ${estado_sim.num_turno} OK. Cumplimiento: ${cumplimiento.toFixed(1)}%`,\n            // Flag para el switch de alerta\n            hubo_desviacion: cumplimiento < 90\n        }\n    };\n    \n    // 6.3. Resetear para el siguiente turno\n    estado_sim.hora_turno = 0;\n    estado_sim.num_turno++;\n    for (let celda of celdas) {\n        celda.unid_ok_total_turno = 0;\n        celda.horas_trabajadas = 0;\n        celda.tiempo_espera = 0;\n        celda.utilizacion = 0;\n    }\n}\n\n// --- 7. GUARDAR ESTADO PARA PRÓXIMO TICK ---\nflow.set(\"celdas\", celdas);\nflow.set(\"estado_sim\", estado_sim);\n\n// Retornar mensajes a las 3 salidas del nodo\nreturn [ msg_grid, msg_tabla, msg_turno_fin ];",
        "outputs": 3,
        "timeout": 0,
        "noerr": 0,
        "initialize": "// Código de inicialización (opcional)\nflow.set(\"celdas\", undefined);\nflow.set(\"estado_sim\", undefined);\nflow.set(\"staffing\", 3);\nflow.set(\"meta_hora\", 5);",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 140,
        "wires": [
            [
                "cac74a40db69d4da"
            ],
            [
                "b0dfce90cb91bbd6"
            ],
            [
                "6ce1104545c8b259",
                "1c3f25c27636e053"
            ]
        ]
    },
    {
        "id": "cac74a40db69d4da",
        "type": "ui-template",
        "z": "e6f073a2291049a5",
        "group": "6e18838a8ce84c0b",
        "name": "Grid de Celdas con estado (colores)",
        "order": 1,
        "width": 0,
        "height": 0,
        "format": "<style>\n    .grid-container {\n        display: grid;\n        grid-template-columns: repeat(auto-fill, minmax(130px, 1fr));\n        gap: 10px;\n        padding: 10px;\n    }\n    .celda {\n        border: 1px solid #444;\n        border-radius: 5px;\n        padding: 10px;\n        text-align: center;\n        color: #333;\n        transition: background-color 0.3s ease;\n    }\n    .celda-title {\n        font-weight: bold;\n        font-size: 1.1em;\n        border-bottom: 1px solid #555;\n        margin-bottom: 5px;\n        padding-bottom: 5px;\n    }\n    .celda-kpi {\n        font-size: 0.9em;\n        text-align: left;\n        margin-top: 3px;\n    }\n    .celda-kpi b {\n        color: #ccc;\n    }\n    /* Clases de estado para colores */\n    .celda-estado-trabajando { background-color: #4CAF50; color: white; }\n    .celda-estado-parada { background-color: #F44336; color: white; }\n    .celda-estado-esperando { background-color: #FFC107; color: black; }\n    .celda-estado-sin_personal { background-color: #607D8B; color: white; }\n\n    /* --- NUEVO CSS PARA BARRA DE UTILIZACIÓN --- */\n    .util-bar-container {\n        background-color: rgba(0,0,0,0.3);\n        border-radius: 4px;\n        height: 14px;\n        width: 100%;\n        margin-top: 5px;\n        border: 1px solid rgba(0,0,0,0.2);\n        overflow: hidden;\n    }\n    .util-bar-value {\n        background-color: #FFF;\n        opacity: 0.7;\n        height: 100%;\n        transition: width 0.3s ease;\n    }\n    /* --- FIN DE CSS NUEVO --- */\n</style>\n\n<div class=\"grid-container\">\n    \n    <div v-for=\"celda in msg.payload\" :key=\"celda.id\" class=\"celda\" :class=\"'celda-estado-' + celda.estado\">\n        <div class=\"celda-title\">Celda {{celda.id}}</div>\n        <div class=\"celda-kpi\"><b>Estado:</b> {{celda.estado}}</div>\n        <div class=\"celda-kpi\"><b>Prod. (h):</b> {{celda.unid_ok_hora}}</div>\n        \n        \n        <div class=\"celda-kpi\">\n            <b>Util (%):</b> {{celda.utilizacion.toFixed(1)}}%\n            <div class=\"util-bar-container\">\n                <div class=\"util-bar-value\" :style=\"{ width: celda.utilizacion.toFixed(1) + '%' }\"></div>\n            </div>\n        </div>\n        \n        \n        <div class=\"celda-kpi\"><b>Espera (h):</b> {{celda.tiempo_espera}}</div>\n    </div>\n</div>",
        "storeOutMessages": true,
        "passthru": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 830,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "b0dfce90cb91bbd6",
        "type": "ui-template",
        "z": "e6f073a2291049a5",
        "group": "14dca520c1815b77",
        "name": "Tabla comparativa metas vs real",
        "order": 1,
        "width": 0,
        "height": 0,
        "format": "<style>\n    .kpi-table {\n        width: 100%;\n        border-collapse: collapse;\n    }\n    .kpi-table td {\n        padding: 8px 10px;\n        border-bottom: 1px solid #444;\n        font-size: 1.0em;\n    }\n    .kpi-label {\n        font-weight: bold;\n        color: #ccc;\n        width: 60%;\n    }\n    .kpi-value {\n        text-align: right;\n        font-family: monospace;\n        font-size: 1.1em;\n        font-weight: bold;\n    }\n</style>\n\n<div v-if=\"msg.payload\">\n    <h4 style=\"margin-top:0; margin-bottom: 10px;\">Turno {{msg.payload.turno}} (Hora {{msg.payload.hora}}/8)</h4>\n    <table class=\"kpi-table\">\n        <tr>\n            <td class=\"kpi-label\">Personal (Staffing)</td>\n            <td class=\"kpi-value\">{{msg.payload.staffing}}</td>\n        </tr>\n        <tr>\n            <td class=\"kpi-label\">Meta por Hora (Total)</td>\n            <td class=\"kpi-value\">{{msg.payload.meta_hora}}</td>\n        </tr>\n        <tr>\n            <td class=\"kpi-label\">Producción Hora Actual</td>\n            <td class=\"kpi-value\">{{msg.payload.real_hora}}</td>\n        </tr>\n        <tr>\n            <td class=\"kpi-label\">Meta Acum. Turno</td>\n            <td class=\"kpi-value\">{{msg.payload.meta_turno_acum}}</td>\n        </tr>\n        <tr>\n            <td class=\"kpi-label\">Real Acum. Turno</td>\n            <td class=\"kpi-value\">{{msg.payload.real_turno_acum}}</td>\n        </tr>\n    </table>\n</div>",
        "storeOutMessages": true,
        "passthru": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 810,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "61af7c6e1b4cb9b5",
        "type": "ui-chart",
        "z": "e6f073a2291049a5",
        "group": "b1e725e9fb17355d",
        "name": "Gráfico",
        "label": "Producción vs Meta por Turno",
        "order": 1,
        "chartType": "bar",
        "category": "",
        "categoryType": "none",
        "xAxisLabel": "Turnos",
        "xAxisProperty": "",
        "xAxisPropertyType": "msg",
        "xAxisType": "category",
        "xAxisFormat": "",
        "xAxisFormatType": "auto",
        "xmin": "",
        "xmax": "",
        "yAxisLabel": "Unidades Producidas",
        "yAxisProperty": "",
        "yAxisPropertyType": "msg",
        "ymin": "",
        "ymax": "",
        "bins": "",
        "stackSeries": false,
        "pointRadius": 4,
        "showLegend": true,
        "removeOlder": "10",
        "removeOlderUnit": "points",
        "removeOlderPoints": "",
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "textColor": [
            "#666666"
        ],
        "textColorDefault": true,
        "gridColor": [
            "#e5e5e5"
        ],
        "gridColorDefault": true,
        "width": "6",
        "height": "4",
        "className": "",
        "interpolation": "linear",
        "x": 1050,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "6ce1104545c8b259",
        "type": "switch",
        "z": "e6f073a2291049a5",
        "name": "¿Hubo Desviación? (<90%)",
        "property": "payload.hubo_desviacion",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 780,
        "y": 200,
        "wires": [
            [
                "985c7c10f8345863"
            ]
        ]
    },
    {
        "id": "985c7c10f8345863",
        "type": "change",
        "z": "e6f073a2291049a5",
        "name": "Preparar Msg de Alerta",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.alerta_msg",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "Alerta de Producción",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1000,
        "y": 200,
        "wires": [
            [
                "f5da312b5f0139f9"
            ]
        ]
    },
    {
        "id": "f5da312b5f0139f9",
        "type": "ui-notification",
        "z": "e6f073a2291049a5",
        "ui": "9477a706cabb673d",
        "position": "top right",
        "colorDefault": false,
        "color": "#F44336",
        "displayTime": "5",
        "showCountdown": true,
        "outputs": 0,
        "allowDismiss": true,
        "dismissText": "Cerrar",
        "allowConfirm": false,
        "confirmText": "Confirm",
        "raw": false,
        "className": "",
        "name": "Alerta de Desviación",
        "x": 1240,
        "y": 200,
        "wires": []
    },
    {
        "id": "7e73a22a2001ac96",
        "type": "ui-slider",
        "z": "e6f073a2291049a5",
        "group": "082d639628900acd",
        "name": "Parámetro: Staffing",
        "label": "Personal (Staffing):",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": false,
        "topic": "msg.payload",
        "topicType": "str",
        "showTicks": "false",
        "min": "1",
        "max": "5",
        "step": "1",
        "className": "",
        "iconPrepend": "",
        "iconAppend": "",
        "color": "",
        "colorTrack": "",
        "colorThumb": "",
        "showTextField": false,
        "x": 200,
        "y": 280,
        "wires": [
            [
                "c15b2828ec6f1321"
            ]
        ]
    },
    {
        "id": "6811673005f98536",
        "type": "ui-number-input",
        "z": "e6f073a2291049a5",
        "group": "082d639628900acd",
        "name": "Parámetro: Meta por Hora",
        "label": "Meta por Hora (por celda):",
        "order": 2,
        "width": 0,
        "height": 0,
        "topic": "topic",
        "topicType": "msg",
        "min": 1,
        "max": 20,
        "step": 1,
        "tooltip": "",
        "passthru": true,
        "sendOnBlur": true,
        "sendOnEnter": true,
        "className": "",
        "clearable": false,
        "icon": "",
        "iconPosition": "left",
        "iconInnerPosition": "inside",
        "spinner": "default",
        "x": 200,
        "y": 340,
        "wires": [
            [
                "d085f38e4e4bbfd4"
            ]
        ]
    },
    {
        "id": "c15b2828ec6f1321",
        "type": "change",
        "z": "e6f073a2291049a5",
        "name": "set flow.staffing",
        "rules": [
            {
                "t": "set",
                "p": "staffing",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 400,
        "y": 280,
        "wires": [
            []
        ]
    },
    {
        "id": "d085f38e4e4bbfd4",
        "type": "change",
        "z": "e6f073a2291049a5",
        "name": "set flow.meta_hora",
        "rules": [
            {
                "t": "set",
                "p": "meta_hora",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 400,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "1c3f25c27636e053",
        "type": "function",
        "z": "e6f073a2291049a5",
        "name": "Formatear Gráfico (por Turno)",
        "func": "// msg.payload = { turno: 1, meta: X, real: Y, ... }\nlet p = msg.payload;\nlet category = `T${p.turno}`; // La etiqueta para el eje X, ej: \"T1\"\n\n// Mensaje para la barra \"Real\"\nlet msg_real = {\n    topic: \"Producción Real\",\n    payload: {\n        x: category,\n        y: p.real\n    }\n};\n\n// Mensaje para la barra \"Meta\"\nlet msg_meta = {\n    topic: \"Meta de Turno\",\n    payload: {\n        x: category,\n        y: p.meta\n    }\n};\n\n// Retorna un array de mensajes.\n// El ui-chart los recibirá y los ploteará como dos barras\n// en la misma categoría (ej. \"T1\")\nreturn [msg_real, msg_meta];",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 300,
        "wires": [
            [
                "61af7c6e1b4cb9b5"
            ]
        ]
    }
]